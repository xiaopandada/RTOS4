
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006238  08006238  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006238  08006238  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e20  20000074  080062b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e94  080062b4  00021e94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d0a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ea  00000000  00000000  00039da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000487d  00000000  00000000  0003fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f76  00000000  00000000  000443cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3d12  00000000  00000000  00059343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b4  00000000  00000000  000fd0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	080056e0 	.word	0x080056e0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	080056e0 	.word	0x080056e0

08000230 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000238:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800023c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000240:	f003 0301 	and.w	r3, r3, #1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d013      	beq.n	8000270 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000248:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800024c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000250:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00b      	beq.n	8000270 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000258:	e000      	b.n	800025c <ITM_SendChar+0x2c>
    {
      __NOP();
 800025a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800025c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000266:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000270:	687b      	ldr	r3, [r7, #4]
}
 8000272:	4618      	mov	r0, r3
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <_write>:
//同样USART2改为你的串口
//	HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,HAL_MAX_DELAY);
//    return ch;
//}
int _write(int file,char *ptr,int len)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
	int i=0;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	e009      	b.n	80002a6 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	60ba      	str	r2, [r7, #8]
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ffc8 	bl	8000230 <ITM_SendChar>
	for(i=0;i<len;i++)
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	3301      	adds	r3, #1
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	697a      	ldr	r2, [r7, #20]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dbf1      	blt.n	8000292 <_write+0x16>
	}
	return len;
 80002ae:	687b      	ldr	r3, [r7, #4]
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 fda2 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f81a 	bl	80002f8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f888 	bl	80003d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002c8:	f000 f85c 	bl	8000384 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80002cc:	f000 fb6e 	bl	80009ac <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002d0:	f002 f82a 	bl	8002328 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task01, NULL, &Task1_attributes);
 80002d4:	4a05      	ldr	r2, [pc, #20]	; (80002ec <main+0x34>)
 80002d6:	2100      	movs	r1, #0
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <main+0x38>)
 80002da:	f002 f88b 	bl	80023f4 <osThreadNew>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <main+0x3c>)
 80002e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002e4:	f002 f852 	bl	800238c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <main+0x30>
 80002ea:	bf00      	nop
 80002ec:	08005734 	.word	0x08005734
 80002f0:	080004dd 	.word	0x080004dd
 80002f4:	200019ac 	.word	0x200019ac

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f004 fd20 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000336:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f001 f85b 	bl	80013fc <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800034c:	f000 f92a 	bl	80005a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2302      	movs	r3, #2
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2102      	movs	r1, #2
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fac6 	bl	80018fc <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000376:	f000 f915 	bl	80005a4 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3740      	adds	r7, #64	; 0x40
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_USART1_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART1_UART_Init+0x4c>)
 80003bc:	f001 fed8 	bl	8002170 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003c6:	f000 f8ed 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	200019b0 	.word	0x200019b0
 80003d4:	40013800 	.word	0x40013800

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ec:	4b37      	ldr	r3, [pc, #220]	; (80004cc <MX_GPIO_Init+0xf4>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a36      	ldr	r2, [pc, #216]	; (80004cc <MX_GPIO_Init+0xf4>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b34      	ldr	r3, [pc, #208]	; (80004cc <MX_GPIO_Init+0xf4>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000404:	4b31      	ldr	r3, [pc, #196]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a30      	ldr	r2, [pc, #192]	; (80004cc <MX_GPIO_Init+0xf4>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_GPIO_Init+0xf4>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0xf4>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a24      	ldr	r2, [pc, #144]	; (80004cc <MX_GPIO_Init+0xf4>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oled_sda_Pin|oled_scl_Pin|oled_rst_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000452:	481f      	ldr	r0, [pc, #124]	; (80004d0 <MX_GPIO_Init+0xf8>)
 8000454:	f000 ffa0 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2104      	movs	r1, #4
 800045c:	481d      	ldr	r0, [pc, #116]	; (80004d4 <MX_GPIO_Init+0xfc>)
 800045e:	f000 ff9b 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oled_dc_GPIO_Port, oled_dc_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	481c      	ldr	r0, [pc, #112]	; (80004d8 <MX_GPIO_Init+0x100>)
 8000468:	f000 ff96 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oled_sda_Pin oled_scl_Pin oled_rst_Pin */
  GPIO_InitStruct.Pin = oled_sda_Pin|oled_scl_Pin|oled_rst_Pin;
 800046c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2302      	movs	r3, #2
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	4812      	ldr	r0, [pc, #72]	; (80004d0 <MX_GPIO_Init+0xf8>)
 8000486:	f000 fdf3 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800048a:	2304      	movs	r3, #4
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000496:	2303      	movs	r3, #3
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <MX_GPIO_Init+0xfc>)
 80004a2:	f000 fde5 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pin : oled_dc_Pin */
  GPIO_InitStruct.Pin = oled_dc_Pin;
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(oled_dc_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <MX_GPIO_Init+0x100>)
 80004be:	f000 fdd7 	bl	8001070 <HAL_GPIO_Init>

}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40011000 	.word	0x40011000
 80004d4:	40011400 	.word	0x40011400
 80004d8:	40010c00 	.word	0x40010c00

080004dc <Task01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 80004e4:	2104      	movs	r1, #4
 80004e6:	4821      	ldr	r0, [pc, #132]	; (800056c <Task01+0x90>)
 80004e8:	f000 ff6e 	bl	80013c8 <HAL_GPIO_TogglePin>
	  //OLED_Clear();
	  //OLED_ShowNumber(0,0,ss,4,12);
	  	 if(ss==4)
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <Task01+0x94>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d117      	bne.n	8000524 <Task01+0x48>
	  	 {
	  		 //OLED_Clear();
	  		 printf("kaishi...\n");
 80004f4:	481f      	ldr	r0, [pc, #124]	; (8000574 <Task01+0x98>)
 80004f6:	f004 fc9f 	bl	8004e38 <puts>

	  		 //OLED_Refresh_Gram();
	  		 OLED_ShowNumber(0,14,s,4,12);
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <Task01+0x9c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	230c      	movs	r3, #12
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2304      	movs	r3, #4
 8000506:	210e      	movs	r1, #14
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f9e1 	bl	80008d0 <OLED_ShowNumber>
	  		OLED_ShowNumber(0,28,m,4,12);
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <Task01+0xa0>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	230c      	movs	r3, #12
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2304      	movs	r3, #4
 800051a:	211c      	movs	r1, #28
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f9d7 	bl	80008d0 <OLED_ShowNumber>
 8000522:	e019      	b.n	8000558 <Task01+0x7c>
	  		 //OLED_Refresh_Gram();
	  	 }
	  	 else if(ss==8)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <Task01+0x94>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b08      	cmp	r3, #8
 800052a:	d115      	bne.n	8000558 <Task01+0x7c>
	  	 {
	  		 OLED_Clear();
 800052c:	f000 f8c4 	bl	80006b8 <OLED_Clear>
	  		 ss=0;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <Task01+0x94>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
	  		 s++;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <Task01+0x9c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <Task01+0x9c>)
 800053e:	6013      	str	r3, [r2, #0]
	  		 if(s==8)
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <Task01+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b08      	cmp	r3, #8
 8000546:	d107      	bne.n	8000558 <Task01+0x7c>
	  		 {
	  			 s=0;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <Task01+0x9c>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
	  			 m++;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <Task01+0xa0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <Task01+0xa0>)
 8000556:	6013      	str	r3, [r2, #0]
	  		 }
	  	 }
	  osDelay(1000);ss++;
 8000558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055c:	f001 fff4 	bl	8002548 <osDelay>
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <Task01+0x94>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a02      	ldr	r2, [pc, #8]	; (8000570 <Task01+0x94>)
 8000568:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800056a:	e7bb      	b.n	80004e4 <Task01+0x8>
 800056c:	40011400 	.word	0x40011400
 8000570:	200019a8 	.word	0x200019a8
 8000574:	08005700 	.word	0x08005700
 8000578:	200019f4 	.word	0x200019f4
 800057c:	20000090 	.word	0x20000090

08000580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d101      	bne.n	8000596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000592:	f000 fc4d 	bl	8000e30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40012c00 	.word	0x40012c00

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <OLED_Refresh_Gram>:
作者：平衡小车之家
我的淘宝小店：http://shop114407458.taobao.com/
**************************************************************************/		   
uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e026      	b.n	800060a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	3b50      	subs	r3, #80	; 0x50
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f82b 	bl	8000620 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 80005ca:	2100      	movs	r1, #0
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 f827 	bl	8000620 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址
 80005d2:	2100      	movs	r1, #0
 80005d4:	2010      	movs	r0, #16
 80005d6:	f000 f823 	bl	8000620 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80005da:	2300      	movs	r3, #0
 80005dc:	71bb      	strb	r3, [r7, #6]
 80005de:	e00d      	b.n	80005fc <OLED_Refresh_Gram+0x4c>
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	490d      	ldr	r1, [pc, #52]	; (800061c <OLED_Refresh_Gram+0x6c>)
 80005e6:	00d2      	lsls	r2, r2, #3
 80005e8:	440a      	add	r2, r1
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f815 	bl	8000620 <OLED_WR_Byte>
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	3301      	adds	r3, #1
 80005fa:	71bb      	strb	r3, [r7, #6]
 80005fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	daed      	bge.n	80005e0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	3301      	adds	r3, #1
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d9d5      	bls.n	80005bc <OLED_Refresh_Gram+0xc>
	}   
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200019f8 	.word	0x200019f8

08000620 <OLED_WR_Byte>:

//向OLED写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d005      	beq.n	8000642 <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <OLED_WR_Byte+0x90>)
 800063c:	f000 feac 	bl	8001398 <HAL_GPIO_WritePin>
 8000640:	e004      	b.n	800064c <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();		  
 8000642:	2200      	movs	r2, #0
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <OLED_WR_Byte+0x90>)
 8000648:	f000 fea6 	bl	8001398 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e022      	b.n	8000698 <OLED_WR_Byte+0x78>
	{			  
		OLED_SCLK_Clr();
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <OLED_WR_Byte+0x94>)
 800065a:	f000 fe9d 	bl	8001398 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	da06      	bge.n	8000674 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <OLED_WR_Byte+0x94>)
 800066e:	f000 fe93 	bl	8001398 <HAL_GPIO_WritePin>
 8000672:	e005      	b.n	8000680 <OLED_WR_Byte+0x60>
		else 
		   OLED_SDIN_Clr();
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <OLED_WR_Byte+0x94>)
 800067c:	f000 fe8c 	bl	8001398 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <OLED_WR_Byte+0x94>)
 8000688:	f000 fe86 	bl	8001398 <HAL_GPIO_WritePin>
		dat<<=1;   
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3301      	adds	r3, #1
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b07      	cmp	r3, #7
 800069c:	d9d9      	bls.n	8000652 <OLED_WR_Byte+0x32>
	}				 		  
	OLED_RS_Set();   	  
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <OLED_WR_Byte+0x90>)
 80006a4:	f000 fe78 	bl	8001398 <HAL_GPIO_WritePin>
} 
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	40011000 	.word	0x40011000

080006b8 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void)  
{  
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e014      	b.n	80006ee <OLED_Clear+0x36>
 80006c4:	2300      	movs	r3, #0
 80006c6:	71bb      	strb	r3, [r7, #6]
 80006c8:	e00a      	b.n	80006e0 <OLED_Clear+0x28>
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	490c      	ldr	r1, [pc, #48]	; (8000700 <OLED_Clear+0x48>)
 80006d0:	00d2      	lsls	r2, r2, #3
 80006d2:	440a      	add	r2, r1
 80006d4:	4413      	add	r3, r2
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	3301      	adds	r3, #1
 80006de:	71bb      	strb	r3, [r7, #6]
 80006e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	daf0      	bge.n	80006ca <OLED_Clear+0x12>
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3301      	adds	r3, #1
 80006ec:	71fb      	strb	r3, [r7, #7]
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b07      	cmp	r3, #7
 80006f2:	d9e7      	bls.n	80006c4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//更新显示
 80006f4:	f7ff ff5c 	bl	80005b0 <OLED_Refresh_Gram>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200019f8 	.word	0x200019f8

08000704 <OLED_DrawPoint>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	460b      	mov	r3, r1
 8000710:	71bb      	strb	r3, [r7, #6]
 8000712:	4613      	mov	r3, r2
 8000714:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db41      	blt.n	80007a6 <OLED_DrawPoint+0xa2>
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b3f      	cmp	r3, #63	; 0x3f
 8000726:	d83e      	bhi.n	80007a6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800073c:	7b7b      	ldrb	r3, [r7, #13]
 800073e:	f1c3 0307 	rsb	r3, r3, #7
 8000742:	2201      	movs	r2, #1
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800074a:	797b      	ldrb	r3, [r7, #5]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d012      	beq.n	8000776 <OLED_DrawPoint+0x72>
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	4916      	ldr	r1, [pc, #88]	; (80007b0 <OLED_DrawPoint+0xac>)
 8000756:	00d2      	lsls	r2, r2, #3
 8000758:	440a      	add	r2, r1
 800075a:	4413      	add	r3, r2
 800075c:	7818      	ldrb	r0, [r3, #0]
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	7bf9      	ldrb	r1, [r7, #15]
 8000764:	4301      	orrs	r1, r0
 8000766:	b2c8      	uxtb	r0, r1
 8000768:	4911      	ldr	r1, [pc, #68]	; (80007b0 <OLED_DrawPoint+0xac>)
 800076a:	00d2      	lsls	r2, r2, #3
 800076c:	440a      	add	r2, r1
 800076e:	4413      	add	r3, r2
 8000770:	4602      	mov	r2, r0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e018      	b.n	80007a8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <OLED_DrawPoint+0xac>)
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	440a      	add	r2, r1
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b25a      	sxtb	r2, r3
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	43db      	mvns	r3, r3
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	b259      	sxtb	r1, r3
 8000792:	79fa      	ldrb	r2, [r7, #7]
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	b2c8      	uxtb	r0, r1
 8000798:	4905      	ldr	r1, [pc, #20]	; (80007b0 <OLED_DrawPoint+0xac>)
 800079a:	00d2      	lsls	r2, r2, #3
 800079c:	440a      	add	r2, r1
 800079e:	4413      	add	r3, r2
 80007a0:	4602      	mov	r2, r0
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e000      	b.n	80007a8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80007a6:	bf00      	nop
}
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	200019f8 	.word	0x200019f8

080007b4 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4604      	mov	r4, r0
 80007bc:	4608      	mov	r0, r1
 80007be:	4611      	mov	r1, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	4623      	mov	r3, r4
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	4603      	mov	r3, r0
 80007c8:	71bb      	strb	r3, [r7, #6]
 80007ca:	460b      	mov	r3, r1
 80007cc:	717b      	strb	r3, [r7, #5]
 80007ce:	4613      	mov	r3, r2
 80007d0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值
 80007d6:	797b      	ldrb	r3, [r7, #5]
 80007d8:	3b20      	subs	r3, #32
 80007da:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80007dc:	2300      	movs	r3, #0
 80007de:	73bb      	strb	r3, [r7, #14]
 80007e0:	e04d      	b.n	800087e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d10b      	bne.n	8000800 <OLED_ShowChar+0x4c>
 80007e8:	797a      	ldrb	r2, [r7, #5]
 80007ea:	7bb9      	ldrb	r1, [r7, #14]
 80007ec:	4828      	ldr	r0, [pc, #160]	; (8000890 <OLED_ShowChar+0xdc>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4403      	add	r3, r0
 80007f8:	440b      	add	r3, r1
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	e007      	b.n	8000810 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体
 8000800:	797a      	ldrb	r2, [r7, #5]
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	4923      	ldr	r1, [pc, #140]	; (8000894 <OLED_ShowChar+0xe0>)
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	440a      	add	r2, r1
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8000810:	2300      	movs	r3, #0
 8000812:	737b      	strb	r3, [r7, #13]
 8000814:	e02d      	b.n	8000872 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	2b00      	cmp	r3, #0
 800081c:	da07      	bge.n	800082e <OLED_ShowChar+0x7a>
 800081e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000822:	79b9      	ldrb	r1, [r7, #6]
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff6c 	bl	8000704 <OLED_DrawPoint>
 800082c:	e00c      	b.n	8000848 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800082e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	79b9      	ldrb	r1, [r7, #6]
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff5e 	bl	8000704 <OLED_DrawPoint>
			temp<<=1;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
			y++;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	3301      	adds	r3, #1
 8000852:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	7b3b      	ldrb	r3, [r7, #12]
 8000858:	1ad2      	subs	r2, r2, r3
 800085a:	793b      	ldrb	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	d105      	bne.n	800086c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	71bb      	strb	r3, [r7, #6]
				x++;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	3301      	adds	r3, #1
 8000868:	71fb      	strb	r3, [r7, #7]
				break;
 800086a:	e005      	b.n	8000878 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	3301      	adds	r3, #1
 8000870:	737b      	strb	r3, [r7, #13]
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	2b07      	cmp	r3, #7
 8000876:	d9ce      	bls.n	8000816 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	3301      	adds	r3, #1
 800087c:	73bb      	strb	r3, [r7, #14]
 800087e:	7bba      	ldrb	r2, [r7, #14]
 8000880:	793b      	ldrb	r3, [r7, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	d3ad      	bcc.n	80007e2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	08005758 	.word	0x08005758
 8000894:	08005bcc 	.word	0x08005bcc

08000898 <oled_pow>:
//m^n函数
uint32_t oled_pow(uint8_t m,uint8_t n)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;	 
 80008a8:	2301      	movs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 80008ac:	e004      	b.n	80008b8 <oled_pow+0x20>
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	71ba      	strb	r2, [r7, #6]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f5      	bne.n	80008ae <oled_pow+0x16>
	return result;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}				  
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
	...

080008d0 <OLED_ShowNumber>:
//len :数字的位数
//size:字体大小
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);
void OLED_ShowNumber(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t size)
{         	
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	603a      	str	r2, [r7, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	460b      	mov	r3, r1
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	4613      	mov	r3, r2
 80008e4:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;						   
 80008e6:	2300      	movs	r3, #0
 80008e8:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e051      	b.n	8000994 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80008f0:	797a      	ldrb	r2, [r7, #5]
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	3b01      	subs	r3, #1
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	200a      	movs	r0, #10
 8000900:	f7ff ffca 	bl	8000898 <oled_pow>
 8000904:	4602      	mov	r2, r0
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	fbb3 f1f2 	udiv	r1, r3, r2
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <OLED_ShowNumber+0xd8>)
 800090e:	fba3 2301 	umull	r2, r3, r3, r1
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1aca      	subs	r2, r1, r3
 800091e:	4613      	mov	r3, r2
 8000920:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d11d      	bne.n	8000964 <OLED_ShowNumber+0x94>
 8000928:	7bfa      	ldrb	r2, [r7, #15]
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	3b01      	subs	r3, #1
 800092e:	429a      	cmp	r2, r3
 8000930:	da18      	bge.n	8000964 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 8000932:	7b7b      	ldrb	r3, [r7, #13]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d113      	bne.n	8000960 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8000938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	7bfa      	ldrb	r2, [r7, #15]
 8000942:	fb02 f303 	mul.w	r3, r2, r3
 8000946:	b2da      	uxtb	r2, r3
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4413      	add	r3, r2
 800094c:	b2d8      	uxtb	r0, r3
 800094e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000952:	79b9      	ldrb	r1, [r7, #6]
 8000954:	2201      	movs	r2, #1
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2220      	movs	r2, #32
 800095a:	f7ff ff2b 	bl	80007b4 <OLED_ShowChar>
				continue;
 800095e:	e016      	b.n	800098e <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 8000960:	2301      	movs	r3, #1
 8000962:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 8000964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	7bfa      	ldrb	r2, [r7, #15]
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	b2da      	uxtb	r2, r3
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4413      	add	r3, r2
 8000978:	b2d8      	uxtb	r0, r3
 800097a:	7b7b      	ldrb	r3, [r7, #13]
 800097c:	3330      	adds	r3, #48	; 0x30
 800097e:	b2da      	uxtb	r2, r3
 8000980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000984:	79b9      	ldrb	r1, [r7, #6]
 8000986:	2401      	movs	r4, #1
 8000988:	9400      	str	r4, [sp, #0]
 800098a:	f7ff ff13 	bl	80007b4 <OLED_ShowChar>
	for(t=0;t<len;t++)
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	3301      	adds	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	7bfa      	ldrb	r2, [r7, #15]
 8000996:	797b      	ldrb	r3, [r7, #5]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3a9      	bcc.n	80008f0 <OLED_ShowNumber+0x20>
	}OLED_Refresh_Gram();
 800099c:	f7ff fe08 	bl	80005b0 <OLED_Refresh_Gram>
} 
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	cccccccd 	.word	0xcccccccd

080009ac <OLED_Init>:
        p++;
    }  
}	   
//初始化OLED
void OLED_Init(void)
{ 	
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f24e 0101 	movw	r1, #57345	; 0xe001
 80009b6:	483d      	ldr	r0, [pc, #244]	; (8000aac <OLED_Init+0x100>)
 80009b8:	f000 fcee 	bl	8001398 <HAL_GPIO_WritePin>
	
	OLED_RST_Clr();
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	483a      	ldr	r0, [pc, #232]	; (8000aac <OLED_Init+0x100>)
 80009c4:	f000 fce8 	bl	8001398 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f000 fa4d 	bl	8000e68 <HAL_Delay>
	OLED_RST_Set(); 
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d4:	4835      	ldr	r0, [pc, #212]	; (8000aac <OLED_Init+0x100>)
 80009d6:	f000 fcdf 	bl	8001398 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 80009da:	2100      	movs	r1, #0
 80009dc:	20ae      	movs	r0, #174	; 0xae
 80009de:	f7ff fe1f 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 80009e2:	2100      	movs	r1, #0
 80009e4:	20d5      	movs	r0, #213	; 0xd5
 80009e6:	f7ff fe1b 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 80009ea:	2100      	movs	r1, #0
 80009ec:	2050      	movs	r0, #80	; 0x50
 80009ee:	f7ff fe17 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 80009f2:	2100      	movs	r1, #0
 80009f4:	20a8      	movs	r0, #168	; 0xa8
 80009f6:	f7ff fe13 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64)
 80009fa:	2100      	movs	r1, #0
 80009fc:	203f      	movs	r0, #63	; 0x3f
 80009fe:	f7ff fe0f 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8000a02:	2100      	movs	r1, #0
 8000a04:	20d3      	movs	r0, #211	; 0xd3
 8000a06:	f7ff fe0b 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fe07 	bl	8000620 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8000a12:	2100      	movs	r1, #0
 8000a14:	2040      	movs	r0, #64	; 0x40
 8000a16:	f7ff fe03 	bl	8000620 <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	208d      	movs	r0, #141	; 0x8d
 8000a1e:	f7ff fdff 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8000a22:	2100      	movs	r1, #0
 8000a24:	2014      	movs	r0, #20
 8000a26:	f7ff fdfb 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2020      	movs	r0, #32
 8000a2e:	f7ff fdf7 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 8000a32:	2100      	movs	r1, #0
 8000a34:	2002      	movs	r0, #2
 8000a36:	f7ff fdf3 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	20a1      	movs	r0, #161	; 0xa1
 8000a3e:	f7ff fdef 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 8000a42:	2100      	movs	r1, #0
 8000a44:	20c0      	movs	r0, #192	; 0xc0
 8000a46:	f7ff fdeb 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	20da      	movs	r0, #218	; 0xda
 8000a4e:	f7ff fde7 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 8000a52:	2100      	movs	r1, #0
 8000a54:	2012      	movs	r0, #18
 8000a56:	f7ff fde3 	bl	8000620 <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2081      	movs	r0, #129	; 0x81
 8000a5e:	f7ff fddf 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 8000a62:	2100      	movs	r1, #0
 8000a64:	20ef      	movs	r0, #239	; 0xef
 8000a66:	f7ff fddb 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	20d9      	movs	r0, #217	; 0xd9
 8000a6e:	f7ff fdd7 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8000a72:	2100      	movs	r1, #0
 8000a74:	20f1      	movs	r0, #241	; 0xf1
 8000a76:	f7ff fdd3 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	20db      	movs	r0, #219	; 0xdb
 8000a7e:	f7ff fdcf 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8000a82:	2100      	movs	r1, #0
 8000a84:	2030      	movs	r0, #48	; 0x30
 8000a86:	f7ff fdcb 	bl	8000620 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	20a4      	movs	r0, #164	; 0xa4
 8000a8e:	f7ff fdc7 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示
 8000a92:	2100      	movs	r1, #0
 8000a94:	20a6      	movs	r0, #166	; 0xa6
 8000a96:	f7ff fdc3 	bl	8000620 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	20af      	movs	r0, #175	; 0xaf
 8000a9e:	f7ff fdbf 	bl	8000620 <OLED_WR_Byte>
	OLED_Clear();
 8000aa2:	f7ff fe09 	bl	80006b8 <OLED_Clear>
}  
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40011000 	.word	0x40011000

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_MspInit+0x68>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_MspInit+0x68>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_MspInit+0x68>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_MspInit+0x68>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_MspInit+0x68>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x68>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fa94 	bl	800101a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_MspInit+0x6c>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_MspInit+0x6c>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_UART_MspInit+0x8c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d131      	bne.n	8000ba4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_UART_MspInit+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <HAL_UART_MspInit+0x90>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_UART_MspInit+0x90>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_UART_MspInit+0x90>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <HAL_UART_MspInit+0x94>)
 8000b86:	f000 fa73 	bl	8001070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_UART_MspInit+0x94>)
 8000ba0:	f000 fa66 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010800 	.word	0x40010800

08000bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2019      	movs	r0, #25
 8000bce:	f000 fa24 	bl	800101a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f000 fa3d 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <HAL_InitTick+0x9c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_InitTick+0x9c>)
 8000bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <HAL_InitTick+0x9c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf0:	f107 0210 	add.w	r2, r7, #16
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fffa 	bl	8001bf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c00:	f000 ffe4 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8000c04:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_InitTick+0xa0>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3b01      	subs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HAL_InitTick+0xa8>)
 8000c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c36:	f001 f82b 	bl	8001c90 <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_InitTick+0xa4>)
 8000c42:	f001 f87d 	bl	8001d40 <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20001df8 	.word	0x20001df8
 8000c60:	40012c00 	.word	0x40012c00

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM1_UP_IRQHandler+0x10>)
 8000c96:	f001 f8b3 	bl	8001e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20001df8 	.word	0x20001df8

08000ca4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
	}

return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
	return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f003 ffb4 	bl	8004cdc <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000c000 	.word	0x2000c000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000094 	.word	0x20000094
 8000da8:	20001e98 	.word	0x20001e98

08000dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dde:	f7ff ffe5 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 ff81 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de6:	f7ff fa67 	bl	80002b8 <main>
  bx lr
 8000dea:	4770      	bx	lr
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000df4:	08006240 	.word	0x08006240
  ldr r2, =_sbss
 8000df8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dfc:	20001e94 	.word	0x20001e94

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x28>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f8f5 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fecc 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe46 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20001e40 	.word	0x20001e40

08000e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20001e40 	.word	0x20001e40

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff0 	bl	8000e54 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffe0 	bl	8000e54 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <__NVIC_EnableIRQ+0x34>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff4f 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff64 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ffb2 	bl	8000fa0 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff81 	bl	8000f4c <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff57 	bl	8000f14 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e179      	b.n	8001378 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001084:	2201      	movs	r2, #1
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8168 	bne.w	8001372 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4aa0      	ldr	r2, [pc, #640]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d05e      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010ac:	4a9e      	ldr	r2, [pc, #632]	; (8001328 <HAL_GPIO_Init+0x2b8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d875      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010b2:	4a9e      	ldr	r2, [pc, #632]	; (800132c <HAL_GPIO_Init+0x2bc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d058      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010b8:	4a9c      	ldr	r2, [pc, #624]	; (800132c <HAL_GPIO_Init+0x2bc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d86f      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010be:	4a9c      	ldr	r2, [pc, #624]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d052      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010c4:	4a9a      	ldr	r2, [pc, #616]	; (8001330 <HAL_GPIO_Init+0x2c0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d869      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ca:	4a9a      	ldr	r2, [pc, #616]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d04c      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010d0:	4a98      	ldr	r2, [pc, #608]	; (8001334 <HAL_GPIO_Init+0x2c4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d863      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010d6:	4a98      	ldr	r2, [pc, #608]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d046      	beq.n	800116a <HAL_GPIO_Init+0xfa>
 80010dc:	4a96      	ldr	r2, [pc, #600]	; (8001338 <HAL_GPIO_Init+0x2c8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d85d      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010e2:	2b12      	cmp	r3, #18
 80010e4:	d82a      	bhi.n	800113c <HAL_GPIO_Init+0xcc>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d859      	bhi.n	800119e <HAL_GPIO_Init+0x12e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <HAL_GPIO_Init+0x80>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001157 	.word	0x08001157
 80010fc:	08001199 	.word	0x08001199
 8001100:	0800119f 	.word	0x0800119f
 8001104:	0800119f 	.word	0x0800119f
 8001108:	0800119f 	.word	0x0800119f
 800110c:	0800119f 	.word	0x0800119f
 8001110:	0800119f 	.word	0x0800119f
 8001114:	0800119f 	.word	0x0800119f
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001161 	.word	0x08001161
 800113c:	4a7f      	ldr	r2, [pc, #508]	; (800133c <HAL_GPIO_Init+0x2cc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e02c      	b.n	800119e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e029      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e024      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	3308      	adds	r3, #8
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e01f      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	330c      	adds	r3, #12
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e01a      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001172:	2304      	movs	r3, #4
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e013      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	611a      	str	r2, [r3, #16]
          break;
 800118a:	e009      	b.n	80011a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800118c:	2308      	movs	r3, #8
 800118e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	615a      	str	r2, [r3, #20]
          break;
 8001196:	e003      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x130>
          break;
 800119e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d801      	bhi.n	80011aa <HAL_GPIO_Init+0x13a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_Init+0x13e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	d802      	bhi.n	80011bc <HAL_GPIO_Init+0x14c>
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x152>
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3b08      	subs	r3, #8
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	210f      	movs	r1, #15
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80c1 	beq.w	8001372 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x2d0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a46      	ldr	r2, [pc, #280]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d01f      	beq.n	8001274 <HAL_GPIO_Init+0x204>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2dc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d019      	beq.n	8001270 <HAL_GPIO_Init+0x200>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d013      	beq.n	800126c <HAL_GPIO_Init+0x1fc>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a43      	ldr	r2, [pc, #268]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d00d      	beq.n	8001268 <HAL_GPIO_Init+0x1f8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a42      	ldr	r2, [pc, #264]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0x1f4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a41      	ldr	r2, [pc, #260]	; (800135c <HAL_GPIO_Init+0x2ec>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d101      	bne.n	8001260 <HAL_GPIO_Init+0x1f0>
 800125c:	2305      	movs	r3, #5
 800125e:	e00a      	b.n	8001276 <HAL_GPIO_Init+0x206>
 8001260:	2306      	movs	r3, #6
 8001262:	e008      	b.n	8001276 <HAL_GPIO_Init+0x206>
 8001264:	2304      	movs	r3, #4
 8001266:	e006      	b.n	8001276 <HAL_GPIO_Init+0x206>
 8001268:	2303      	movs	r3, #3
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x206>
 800126c:	2302      	movs	r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x206>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x206>
 8001274:	2300      	movs	r3, #0
 8001276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001286:	492f      	ldr	r1, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	492e      	ldr	r1, [pc, #184]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	492a      	ldr	r1, [pc, #168]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4924      	ldr	r1, [pc, #144]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	4920      	ldr	r1, [pc, #128]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	491a      	ldr	r1, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4916      	ldr	r1, [pc, #88]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d025      	beq.n	8001364 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4910      	ldr	r1, [pc, #64]	; (8001360 <HAL_GPIO_Init+0x2f0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e025      	b.n	8001372 <HAL_GPIO_Init+0x302>
 8001326:	bf00      	nop
 8001328:	10320000 	.word	0x10320000
 800132c:	10310000 	.word	0x10310000
 8001330:	10220000 	.word	0x10220000
 8001334:	10210000 	.word	0x10210000
 8001338:	10120000 	.word	0x10120000
 800133c:	10110000 	.word	0x10110000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	40010800 	.word	0x40010800
 800134c:	40010c00 	.word	0x40010c00
 8001350:	40011000 	.word	0x40011000
 8001354:	40011400 	.word	0x40011400
 8001358:	40011800 	.word	0x40011800
 800135c:	40011c00 	.word	0x40011c00
 8001360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_GPIO_Init+0x324>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	43db      	mvns	r3, r3
 800136c:	4909      	ldr	r1, [pc, #36]	; (8001394 <HAL_GPIO_Init+0x324>)
 800136e:	4013      	ands	r3, r2
 8001370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	3301      	adds	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	f47f ae7e 	bne.w	8001084 <HAL_GPIO_Init+0x14>
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	372c      	adds	r7, #44	; 0x2c
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43d9      	mvns	r1, r3
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	400b      	ands	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e26c      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d00c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b8f      	ldr	r3, [pc, #572]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 8001434:	4b8c      	ldr	r3, [pc, #560]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d168      	bne.n	8001528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e246      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x76>
 8001464:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a7f      	ldr	r2, [pc, #508]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e02e      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7a      	ldr	r2, [pc, #488]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b78      	ldr	r3, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a77      	ldr	r2, [pc, #476]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xbc>
 800149e:	4b72      	ldr	r3, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a71      	ldr	r2, [pc, #452]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a67      	ldr	r2, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcbc 	bl	8000e54 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcb8 	bl	8000e54 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1fa      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe4>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fca8 	bl	8000e54 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fca4 	bl	8000e54 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1e6      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x10c>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
 800154e:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1ba      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4939      	ldr	r1, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_RCC_OscConfig+0x270>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fc5d 	bl	8000e54 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc59 	bl	8000e54 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e19b      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4927      	ldr	r1, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc3c 	bl	8000e54 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc38 	bl	8000e54 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e17a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03a      	beq.n	8001680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x274>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fc1c 	bl	8000e54 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc18 	bl	8000e54 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e15a      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fb08 	bl	8001c54 <RCC_Delay>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_RCC_OscConfig+0x274>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fc02 	bl	8000e54 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fbfe 	bl	8000e54 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e140      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	42420000 	.word	0x42420000
 8001670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b9e      	ldr	r3, [pc, #632]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a6 	beq.w	80017da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b94      	ldr	r3, [pc, #592]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a93      	ldr	r2, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b8e      	ldr	r3, [pc, #568]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a8a      	ldr	r2, [pc, #552]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbbf 	bl	8000e54 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fbbb 	bl	8000e54 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	; 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0fd      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x312>
 8001700:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e02d      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x356>
 8001738:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a6c      	ldr	r2, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001752:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a66      	ldr	r2, [pc, #408]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a63      	ldr	r2, [pc, #396]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fb6f 	bl	8000e54 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fb6b 	bl	8000e54 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0ab      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x37e>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fb59 	bl	8000e54 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fb55 	bl	8000e54 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e095      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8081 	beq.w	80018e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e4:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d061      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d146      	bne.n	8001886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb29 	bl	8000e54 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fb25 	bl	8000e54 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e067      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	492d      	ldr	r1, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	430b      	orrs	r3, r1
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff faf9 	bl	8000e54 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff faf5 	bl	8000e54 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e037      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x46a>
 8001884:	e02f      	b.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_RCC_OscConfig+0x4fc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fae2 	bl	8000e54 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fade 	bl	8000e54 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e020      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x498>
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e013      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
 80018f8:	42420060 	.word	0x42420060

080018fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d0      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d910      	bls.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4965      	ldr	r1, [pc, #404]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001962:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800197a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d040      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d115      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e073      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06b      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019da:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4936      	ldr	r1, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019ec:	f7ff fa32 	bl	8000e54 <HAL_GetTick>
 80019f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f4:	f7ff fa2e 	bl	8000e54 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e053      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 020c 	and.w	r2, r3, #12
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1eb      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d210      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4922      	ldr	r1, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1d0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f884 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080061bc 	.word	0x080061bc
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b490      	push	{r4, r7}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ad8:	1d3c      	adds	r4, r7, #4
 8001ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae0:	f240 2301 	movw	r3, #513	; 0x201
 8001ae4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x46>
 8001b0e:	e02d      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b12:	623b      	str	r3, [r7, #32]
      break;
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	0c9b      	lsrs	r3, r3, #18
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b22:	4413      	add	r3, r2
 8001b24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c5b      	lsrs	r3, r3, #17
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b42:	4413      	add	r3, r2
 8001b44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4e:	fb02 f203 	mul.w	r2, r2, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5a:	e004      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	623b      	str	r3, [r7, #32]
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b6e:	623b      	str	r3, [r7, #32]
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6a3b      	ldr	r3, [r7, #32]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc90      	pop	{r4, r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	0800570c 	.word	0x0800570c
 8001b84:	40021000 	.word	0x40021000
 8001b88:	007a1200 	.word	0x007a1200
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff2 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	080061cc 	.word	0x080061cc

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	080061cc 	.word	0x080061cc

08001bf4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	220f      	movs	r2, #15
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_GetClockConfig+0x58>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCC_GetClockConfig+0x58>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_GetClockConfig+0x58>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_RCC_GetClockConfig+0x58>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40022000 	.word	0x40022000

08001c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <RCC_Delay+0x34>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <RCC_Delay+0x38>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0a5b      	lsrs	r3, r3, #9
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c70:	bf00      	nop
  }
  while (Delay --);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	60fa      	str	r2, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f9      	bne.n	8001c70 <RCC_Delay+0x1c>
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	10624dd3 	.word	0x10624dd3

08001c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e041      	b.n	8001d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f839 	bl	8001d2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f000 f9c2 	bl	8002058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d001      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e044      	b.n	8001de2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_TIM_Base_Start_IT+0xac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d018      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d00e      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x6c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <HAL_TIM_Base_Start_IT+0xbc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d111      	bne.n	8001dd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d010      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dce:	e007      	b.n	8001de0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40012c00 	.word	0x40012c00
 8001df0:	40013400 	.word	0x40013400
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00

08001e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0202 	mvn.w	r2, #2
 8001e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8ed 	bl	8002022 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8e0 	bl	8002010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8ef 	bl	8002034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0204 	mvn.w	r2, #4
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8c3 	bl	8002022 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8b6 	bl	8002010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8c5 	bl	8002034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d122      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0208 	mvn.w	r2, #8
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f899 	bl	8002022 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f88c 	bl	8002010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f89b 	bl	8002034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d122      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b10      	cmp	r3, #16
 8001f1e:	d11b      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0210 	mvn.w	r2, #16
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f86f 	bl	8002022 <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f862 	bl	8002010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f871 	bl	8002034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0201 	mvn.w	r2, #1
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fafe 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	2b80      	cmp	r3, #128	; 0x80
 8001f90:	d10e      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d107      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8d7 	bl	800215e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fba:	2b40      	cmp	r3, #64	; 0x40
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc8:	2b40      	cmp	r3, #64	; 0x40
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f835 	bl	8002046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0220 	mvn.w	r2, #32
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8a2 	bl	800214c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a33      	ldr	r2, [pc, #204]	; (8002138 <TIM_Base_SetConfig+0xe0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a32      	ldr	r2, [pc, #200]	; (800213c <TIM_Base_SetConfig+0xe4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00f      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800207e:	d00b      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <TIM_Base_SetConfig+0xe8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d007      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a2e      	ldr	r2, [pc, #184]	; (8002144 <TIM_Base_SetConfig+0xec>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0x40>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a2d      	ldr	r2, [pc, #180]	; (8002148 <TIM_Base_SetConfig+0xf0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d108      	bne.n	80020aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a22      	ldr	r2, [pc, #136]	; (8002138 <TIM_Base_SetConfig+0xe0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <TIM_Base_SetConfig+0x82>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <TIM_Base_SetConfig+0xe4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00f      	beq.n	80020da <TIM_Base_SetConfig+0x82>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d00b      	beq.n	80020da <TIM_Base_SetConfig+0x82>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <TIM_Base_SetConfig+0xe8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <TIM_Base_SetConfig+0x82>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <TIM_Base_SetConfig+0xec>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d003      	beq.n	80020da <TIM_Base_SetConfig+0x82>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <TIM_Base_SetConfig+0xf0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d108      	bne.n	80020ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <TIM_Base_SetConfig+0xe0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0xc8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <TIM_Base_SetConfig+0xe4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	615a      	str	r2, [r3, #20]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	40012c00 	.word	0x40012c00
 800213c:	40013400 	.word	0x40013400
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00

0800214c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e03f      	b.n	8002202 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fcc2 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f829 	bl	800220c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002246:	f023 030c 	bic.w	r3, r3, #12
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	430b      	orrs	r3, r1
 8002252:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <UART_SetConfig+0x114>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d103      	bne.n	800227c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002274:	f7ff fcaa 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	e002      	b.n	8002282 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800227c:	f7ff fc92 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002280:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	009a      	lsls	r2, r3, #2
 800228c:	441a      	add	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <UART_SetConfig+0x118>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	0119      	lsls	r1, r3, #4
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	009a      	lsls	r2, r3, #2
 80022ac:	441a      	add	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <UART_SetConfig+0x118>)
 80022ba:	fba3 0302 	umull	r0, r3, r3, r2
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2064      	movs	r0, #100	; 0x64
 80022c2:	fb00 f303 	mul.w	r3, r0, r3
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	3332      	adds	r3, #50	; 0x32
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <UART_SetConfig+0x118>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d8:	4419      	add	r1, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <UART_SetConfig+0x118>)
 80022f2:	fba3 0302 	umull	r0, r3, r3, r2
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2064      	movs	r0, #100	; 0x64
 80022fa:	fb00 f303 	mul.w	r3, r0, r3
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	3332      	adds	r3, #50	; 0x32
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <UART_SetConfig+0x118>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 020f 	and.w	r2, r3, #15
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	440a      	add	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40013800 	.word	0x40013800
 8002324:	51eb851f 	.word	0x51eb851f

08002328 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800232e:	f3ef 8305 	mrs	r3, IPSR
 8002332:	60bb      	str	r3, [r7, #8]
  return(result);
 8002334:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233a:	f3ef 8310 	mrs	r3, PRIMASK
 800233e:	607b      	str	r3, [r7, #4]
  return(result);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <osKernelInitialize+0x32>
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <osKernelInitialize+0x60>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d109      	bne.n	8002362 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800234e:	f3ef 8311 	mrs	r3, BASEPRI
 8002352:	603b      	str	r3, [r7, #0]
  return(result);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800235a:	f06f 0305 	mvn.w	r3, #5
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e00c      	b.n	800237c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002362:	4b09      	ldr	r3, [pc, #36]	; (8002388 <osKernelInitialize+0x60>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <osKernelInitialize+0x60>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e002      	b.n	800237c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000098 	.word	0x20000098

0800238c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002392:	f3ef 8305 	mrs	r3, IPSR
 8002396:	60bb      	str	r3, [r7, #8]
  return(result);
 8002398:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800239e:	f3ef 8310 	mrs	r3, PRIMASK
 80023a2:	607b      	str	r3, [r7, #4]
  return(result);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <osKernelStart+0x32>
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <osKernelStart+0x64>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d109      	bne.n	80023c6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023b2:	f3ef 8311 	mrs	r3, BASEPRI
 80023b6:	603b      	str	r3, [r7, #0]
  return(result);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80023be:	f06f 0305 	mvn.w	r3, #5
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e00e      	b.n	80023e4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <osKernelStart+0x64>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <osKernelStart+0x64>)
 80023d0:	2202      	movs	r2, #2
 80023d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80023d4:	f001 f878 	bl	80034c8 <vTaskStartScheduler>
      stat = osOK;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e002      	b.n	80023e4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000098 	.word	0x20000098

080023f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b092      	sub	sp, #72	; 0x48
 80023f8:	af04      	add	r7, sp, #16
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002404:	f3ef 8305 	mrs	r3, IPSR
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 8094 	bne.w	800253a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002412:	f3ef 8310 	mrs	r3, PRIMASK
 8002416:	623b      	str	r3, [r7, #32]
  return(result);
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 808d 	bne.w	800253a <osThreadNew+0x146>
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <osThreadNew+0x150>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d106      	bne.n	8002436 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002428:	f3ef 8311 	mrs	r3, BASEPRI
 800242c:	61fb      	str	r3, [r7, #28]
  return(result);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8082 	bne.w	800253a <osThreadNew+0x146>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d07e      	beq.n	800253a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002440:	2318      	movs	r3, #24
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002444:	2300      	movs	r3, #0
 8002446:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002448:	f107 031b 	add.w	r3, r7, #27
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d045      	beq.n	80024e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <osThreadNew+0x74>
        name = attr->name;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <osThreadNew+0x9a>
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	2b38      	cmp	r3, #56	; 0x38
 8002480:	d805      	bhi.n	800248e <osThreadNew+0x9a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <osThreadNew+0x9e>
        return (NULL);
 800248e:	2300      	movs	r3, #0
 8002490:	e054      	b.n	800253c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <osThreadNew+0xd4>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b5b      	cmp	r3, #91	; 0x5b
 80024b0:	d90a      	bls.n	80024c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <osThreadNew+0xd4>
        mem = 1;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c6:	e010      	b.n	80024ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10c      	bne.n	80024ea <osThreadNew+0xf6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <osThreadNew+0xf6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d104      	bne.n	80024ea <osThreadNew+0xf6>
          mem = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e4:	e001      	b.n	80024ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d110      	bne.n	8002512 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024f8:	9202      	str	r2, [sp, #8]
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002504:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fe12 	bl	8003130 <xTaskCreateStatic>
 800250c:	4603      	mov	r3, r0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e013      	b.n	800253a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	d110      	bne.n	800253a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	b29a      	uxth	r2, r3
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fe5c 	bl	80031e8 <xTaskCreate>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <osThreadNew+0x146>
          hTask = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800253a:	697b      	ldr	r3, [r7, #20]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3738      	adds	r7, #56	; 0x38
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000098 	.word	0x20000098

08002548 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002550:	f3ef 8305 	mrs	r3, IPSR
 8002554:	613b      	str	r3, [r7, #16]
  return(result);
 8002556:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800255c:	f3ef 8310 	mrs	r3, PRIMASK
 8002560:	60fb      	str	r3, [r7, #12]
  return(result);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <osDelay+0x34>
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <osDelay+0x58>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d109      	bne.n	8002584 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002570:	f3ef 8311 	mrs	r3, BASEPRI
 8002574:	60bb      	str	r3, [r7, #8]
  return(result);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <osDelay+0x3c>
    stat = osErrorISR;
 800257c:	f06f 0305 	mvn.w	r3, #5
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e007      	b.n	8002594 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <osDelay+0x4c>
      vTaskDelay(ticks);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 ff66 	bl	8003460 <vTaskDelay>
    }
  }

  return (stat);
 8002594:	697b      	ldr	r3, [r7, #20]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000098 	.word	0x20000098

080025a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <vApplicationGetIdleTaskMemory+0x28>)
 80025b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80025ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	601a      	str	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	2000009c 	.word	0x2000009c
 80025d0:	200000f8 	.word	0x200000f8

080025d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <vApplicationGetTimerTaskMemory+0x2c>)
 80025e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4a06      	ldr	r2, [pc, #24]	; (8002604 <vApplicationGetTimerTaskMemory+0x30>)
 80025ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	200002f8 	.word	0x200002f8
 8002604:	20000354 	.word	0x20000354

08002608 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f103 0208 	add.w	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 0208 	add.w	r2, r3, #8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f103 0208 	add.w	r2, r3, #8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800265e:	b480      	push	{r7}
 8002660:	b085      	sub	sp, #20
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d103      	bne.n	80026c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e00c      	b.n	80026de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3308      	adds	r3, #8
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e002      	b.n	80026d2 <vListInsert+0x2e>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d2f6      	bcs.n	80026cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6892      	ldr	r2, [r2, #8]
 800272a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6852      	ldr	r2, [r2, #4]
 8002734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d103      	bne.n	8002748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
	...

08002768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002792:	f001 ffcb 	bl	800472c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	441a      	add	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	3b01      	subs	r3, #1
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d114      	bne.n	8002812 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01a      	beq.n	8002826 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3310      	adds	r3, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 f8f1 	bl	80039dc <xTaskRemoveFromEventList>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <xQueueGenericReset+0xcc>)
 8002802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	e009      	b.n	8002826 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3310      	adds	r3, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fef6 	bl	8002608 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3324      	adds	r3, #36	; 0x24
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fef1 	bl	8002608 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002826:	f001 ffb1 	bl	800478c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800282a:	2301      	movs	r3, #1
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	; 0x38
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <xQueueGenericCreateStatic+0x52>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <xQueueGenericCreateStatic+0x56>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <xQueueGenericCreateStatic+0x58>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	623b      	str	r3, [r7, #32]
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <xQueueGenericCreateStatic+0x7e>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <xQueueGenericCreateStatic+0x82>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <xQueueGenericCreateStatic+0x84>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61fb      	str	r3, [r7, #28]
}
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80028d6:	2350      	movs	r3, #80	; 0x50
 80028d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b50      	cmp	r3, #80	; 0x50
 80028de:	d00a      	beq.n	80028f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	61bb      	str	r3, [r7, #24]
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002908:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f805 	bl	8002926 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800291e:	4618      	mov	r0, r3
 8002920:	3730      	adds	r7, #48	; 0x30
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e002      	b.n	8002948 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002954:	2101      	movs	r1, #1
 8002956:	69b8      	ldr	r0, [r7, #24]
 8002958:	f7ff ff06 	bl	8002768 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800297a:	2300      	movs	r3, #0
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueGenericSend+0x32>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <xQueueGenericSend+0x40>
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <xQueueGenericSend+0x44>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <xQueueGenericSend+0x46>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <xQueueGenericSend+0x60>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d103      	bne.n	80029da <xQueueGenericSend+0x6e>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <xQueueGenericSend+0x72>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueGenericSend+0x74>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueGenericSend+0x8e>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	623b      	str	r3, [r7, #32]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029fa:	f001 f9b1 	bl	8003d60 <xTaskGetSchedulerState>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <xQueueGenericSend+0x9e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <xQueueGenericSend+0xa2>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <xQueueGenericSend+0xa4>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGenericSend+0xbe>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	61fb      	str	r3, [r7, #28]
}
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a2a:	f001 fe7f 	bl	800472c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <xQueueGenericSend+0xd4>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d129      	bne.n	8002a94 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a46:	f000 fa07 	bl	8002e58 <prvCopyDataToQueue>
 8002a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d010      	beq.n	8002a76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	3324      	adds	r3, #36	; 0x24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 ffbf 	bl	80039dc <xTaskRemoveFromEventList>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a64:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <xQueueGenericSend+0x1f8>)
 8002a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	e00a      	b.n	8002a8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <xQueueGenericSend+0x1f8>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a8c:	f001 fe7e 	bl	800478c <vPortExitCritical>
				return pdPASS;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e063      	b.n	8002b5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a9a:	f001 fe77 	bl	800478c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e05c      	b.n	8002b5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fff9 	bl	8003aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ab6:	f001 fe69 	bl	800478c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aba:	f000 fd6b 	bl	8003594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002abe:	f001 fe35 	bl	800472c <vPortEnterCritical>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d103      	bne.n	8002ad8 <xQueueGenericSend+0x16c>
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ade:	b25b      	sxtb	r3, r3
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d103      	bne.n	8002aee <xQueueGenericSend+0x182>
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aee:	f001 fe4d 	bl	800478c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002af2:	1d3a      	adds	r2, r7, #4
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 ffe8 	bl	8003ad0 <xTaskCheckForTimeOut>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d124      	bne.n	8002b50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b08:	f000 fa9e 	bl	8003048 <prvIsQueueFull>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	3310      	adds	r3, #16
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ff0e 	bl	800393c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b22:	f000 fa29 	bl	8002f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b26:	f000 fd43 	bl	80035b0 <xTaskResumeAll>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f47f af7c 	bne.w	8002a2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <xQueueGenericSend+0x1f8>)
 8002b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	e772      	b.n	8002a2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b46:	f000 fa17 	bl	8002f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b4a:	f000 fd31 	bl	80035b0 <xTaskResumeAll>
 8002b4e:	e76c      	b.n	8002a2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b52:	f000 fa11 	bl	8002f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b56:	f000 fd2b 	bl	80035b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b5a:	2300      	movs	r3, #0
		}
	}
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3738      	adds	r7, #56	; 0x38
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08e      	sub	sp, #56	; 0x38
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <xQueueGenericSendFromISR+0x3c>
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <xQueueGenericSendFromISR+0x40>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <xQueueGenericSendFromISR+0x42>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	623b      	str	r3, [r7, #32]
}
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d103      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x6a>
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <xQueueGenericSendFromISR+0x6e>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueGenericSendFromISR+0x70>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61fb      	str	r3, [r7, #28]
}
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf2:	f001 fe5d 	bl	80048b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	61ba      	str	r2, [r7, #24]
 8002c0c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <xQueueGenericSendFromISR+0xbc>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d12c      	bne.n	8002c7e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c34:	f000 f910 	bl	8002e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c38:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d112      	bne.n	8002c68 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	3324      	adds	r3, #36	; 0x24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fec4 	bl	80039dc <xTaskRemoveFromEventList>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e007      	b.n	8002c78 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	b25a      	sxtb	r2, r3
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c7c:	e001      	b.n	8002c82 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3738      	adds	r7, #56	; 0x38
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <xQueueReceive+0x30>
	__asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	623b      	str	r3, [r7, #32]
}
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <xQueueReceive+0x3e>
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <xQueueReceive+0x42>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <xQueueReceive+0x44>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xQueueReceive+0x5e>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	61fb      	str	r3, [r7, #28]
}
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf6:	f001 f833 	bl	8003d60 <xTaskGetSchedulerState>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <xQueueReceive+0x6e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <xQueueReceive+0x72>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueReceive+0x74>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueReceive+0x8e>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	61bb      	str	r3, [r7, #24]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d26:	f001 fd01 	bl	800472c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01f      	beq.n	8002d76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d3a:	f000 f8f7 	bl	8002f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00f      	beq.n	8002d6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	3310      	adds	r3, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fe42 	bl	80039dc <xTaskRemoveFromEventList>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <xQueueReceive+0x1bc>)
 8002d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d6e:	f001 fd0d 	bl	800478c <vPortExitCritical>
				return pdPASS;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e069      	b.n	8002e4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d7c:	f001 fd06 	bl	800478c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e062      	b.n	8002e4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fe88 	bl	8003aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d98:	f001 fcf8 	bl	800478c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d9c:	f000 fbfa 	bl	8003594 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da0:	f001 fcc4 	bl	800472c <vPortEnterCritical>
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d103      	bne.n	8002dba <xQueueReceive+0x122>
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d103      	bne.n	8002dd0 <xQueueReceive+0x138>
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd0:	f001 fcdc 	bl	800478c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dd4:	1d3a      	adds	r2, r7, #4
 8002dd6:	f107 0310 	add.w	r3, r7, #16
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fe77 	bl	8003ad0 <xTaskCheckForTimeOut>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d123      	bne.n	8002e30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dea:	f000 f917 	bl	800301c <prvIsQueueEmpty>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	3324      	adds	r3, #36	; 0x24
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fd9d 	bl	800393c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e04:	f000 f8b8 	bl	8002f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e08:	f000 fbd2 	bl	80035b0 <xTaskResumeAll>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d189      	bne.n	8002d26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <xQueueReceive+0x1bc>)
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	e780      	b.n	8002d26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e26:	f000 f8a7 	bl	8002f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e2a:	f000 fbc1 	bl	80035b0 <xTaskResumeAll>
 8002e2e:	e77a      	b.n	8002d26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f000 f8a1 	bl	8002f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e36:	f000 fbbb 	bl	80035b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e3c:	f000 f8ee 	bl	800301c <prvIsQueueEmpty>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f43f af6f 	beq.w	8002d26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3730      	adds	r7, #48	; 0x30
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000ed04 	.word	0xe000ed04

08002e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d14d      	bne.n	8002f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 ff8a 	bl	8003d9c <xTaskPriorityDisinherit>
 8002e88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	e043      	b.n	8002f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d119      	bne.n	8002ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6898      	ldr	r0, [r3, #8]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	f001 ff44 	bl	8004d30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	441a      	add	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d32b      	bcc.n	8002f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	e026      	b.n	8002f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68d8      	ldr	r0, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	f001 ff2a 	bl	8004d30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	425b      	negs	r3, r3
 8002ee6:	441a      	add	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d207      	bcs.n	8002f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	425b      	negs	r3, r3
 8002f02:	441a      	add	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d105      	bne.n	8002f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f22:	697b      	ldr	r3, [r7, #20]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d303      	bcc.n	8002f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68d9      	ldr	r1, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6838      	ldr	r0, [r7, #0]
 8002f6c:	f001 fee0 	bl	8004d30 <memcpy>
	}
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f80:	f001 fbd4 	bl	800472c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f8c:	e011      	b.n	8002fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3324      	adds	r3, #36	; 0x24
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 fd1e 	bl	80039dc <xTaskRemoveFromEventList>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fa6:	f000 fdf5 	bl	8003b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	dce9      	bgt.n	8002f8e <prvUnlockQueue+0x16>
 8002fba:	e000      	b.n	8002fbe <prvUnlockQueue+0x46>
					break;
 8002fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	22ff      	movs	r2, #255	; 0xff
 8002fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fc6:	f001 fbe1 	bl	800478c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fca:	f001 fbaf 	bl	800472c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fd6:	e011      	b.n	8002ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3310      	adds	r3, #16
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fcf9 	bl	80039dc <xTaskRemoveFromEventList>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff0:	f000 fdd0 	bl	8003b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ff4:	7bbb      	ldrb	r3, [r7, #14]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003000:	2b00      	cmp	r3, #0
 8003002:	dce9      	bgt.n	8002fd8 <prvUnlockQueue+0x60>
 8003004:	e000      	b.n	8003008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003010:	f001 fbbc 	bl	800478c <vPortExitCritical>
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003024:	f001 fb82 	bl	800472c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e001      	b.n	800303a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800303a:	f001 fba7 	bl	800478c <vPortExitCritical>

	return xReturn;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003050:	f001 fb6c 	bl	800472c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	429a      	cmp	r2, r3
 800305e:	d102      	bne.n	8003066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003060:	2301      	movs	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e001      	b.n	800306a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800306a:	f001 fb8f 	bl	800478c <vPortExitCritical>

	return xReturn;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e014      	b.n	80030b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003088:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <vQueueAddToRegistry+0x4c>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <vQueueAddToRegistry+0x4c>)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <vQueueAddToRegistry+0x4c>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030aa:	e006      	b.n	80030ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d9e7      	bls.n	8003088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	20001e44 	.word	0x20001e44

080030c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030d8:	f001 fb28 	bl	800472c <vPortEnterCritical>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d103      	bne.n	80030f2 <vQueueWaitForMessageRestricted+0x2a>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <vQueueWaitForMessageRestricted+0x40>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003108:	f001 fb40 	bl	800478c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3324      	adds	r3, #36	; 0x24
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fc31 	bl	8003984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff28 	bl	8002f78 <prvUnlockQueue>
	}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08e      	sub	sp, #56	; 0x38
 8003134:	af04      	add	r7, sp, #16
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	623b      	str	r3, [r7, #32]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xTaskCreateStatic+0x46>
	__asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	61fb      	str	r3, [r7, #28]
}
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003176:	235c      	movs	r3, #92	; 0x5c
 8003178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b5c      	cmp	r3, #92	; 0x5c
 800317e:	d00a      	beq.n	8003196 <xTaskCreateStatic+0x66>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01e      	beq.n	80031da <xTaskCreateStatic+0xaa>
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01b      	beq.n	80031da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031b4:	2300      	movs	r3, #0
 80031b6:	9303      	str	r3, [sp, #12]
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	9302      	str	r3, [sp, #8]
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f850 	bl	8003272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d4:	f000 f8d4 	bl	8003380 <prvAddNewTaskToReadyList>
 80031d8:	e001      	b.n	80031de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031de:	697b      	ldr	r3, [r7, #20]
	}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af04      	add	r7, sp, #16
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 fb95 	bl	800492c <pvPortMalloc>
 8003202:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00e      	beq.n	8003228 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800320a:	205c      	movs	r0, #92	; 0x5c
 800320c:	f001 fb8e 	bl	800492c <pvPortMalloc>
 8003210:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
 800321e:	e005      	b.n	800322c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003220:	6978      	ldr	r0, [r7, #20]
 8003222:	f001 fc47 	bl	8004ab4 <vPortFree>
 8003226:	e001      	b.n	800322c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d017      	beq.n	8003262 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	2300      	movs	r3, #0
 800323e:	9303      	str	r3, [sp, #12]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	9302      	str	r3, [sp, #8]
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f80e 	bl	8003272 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003256:	69f8      	ldr	r0, [r7, #28]
 8003258:	f000 f892 	bl	8003380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800325c:	2301      	movs	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	e002      	b.n	8003268 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
 8003266:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003268:	69bb      	ldr	r3, [r7, #24]
	}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	461a      	mov	r2, r3
 800328a:	21a5      	movs	r1, #165	; 0xa5
 800328c:	f001 fd5e 	bl	8004d4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800329a:	3b01      	subs	r3, #1
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <prvInitialiseNewTask+0x58>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	617b      	str	r3, [r7, #20]
}
 80032c6:	bf00      	nop
 80032c8:	e7fe      	b.n	80032c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e012      	b.n	80032f6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	7819      	ldrb	r1, [r3, #0]
 80032d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	4413      	add	r3, r2
 80032de:	3334      	adds	r3, #52	; 0x34
 80032e0:	460a      	mov	r2, r1
 80032e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d006      	beq.n	80032fe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d9e9      	bls.n	80032d0 <prvInitialiseNewTask+0x5e>
 80032fc:	e000      	b.n	8003300 <prvInitialiseNewTask+0x8e>
		{
			break;
 80032fe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	2b37      	cmp	r3, #55	; 0x37
 800330c:	d901      	bls.n	8003312 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800330e:	2337      	movs	r3, #55	; 0x37
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800331c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	3304      	adds	r3, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f98c 	bl	8002646 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	3318      	adds	r3, #24
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f987 	bl	8002646 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2200      	movs	r2, #0
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	69b8      	ldr	r0, [r7, #24]
 8003362:	f001 f8ef 	bl	8004544 <pxPortInitialiseStack>
 8003366:	4602      	mov	r2, r0
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003388:	f001 f9d0 	bl	800472c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <prvAddNewTaskToReadyList+0xc4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <prvAddNewTaskToReadyList+0xc4>)
 8003394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800339e:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <prvAddNewTaskToReadyList+0xc4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d110      	bne.n	80033ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033ac:	f000 fc16 	bl	8003bdc <prvInitialiseTaskLists>
 80033b0:	e00d      	b.n	80033ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <prvAddNewTaskToReadyList+0xcc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d802      	bhi.n	80033ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <prvAddNewTaskToReadyList+0xd0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <prvAddNewTaskToReadyList+0xd0>)
 80033d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <prvAddNewTaskToReadyList+0xd0>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <prvAddNewTaskToReadyList+0xd4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d903      	bls.n	80033f4 <prvAddNewTaskToReadyList+0x74>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	4a18      	ldr	r2, [pc, #96]	; (8003454 <prvAddNewTaskToReadyList+0xd4>)
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <prvAddNewTaskToReadyList+0xd8>)
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7ff f927 	bl	800265e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003410:	f001 f9bc 	bl	800478c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <prvAddNewTaskToReadyList+0xcc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00e      	beq.n	800343a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	429a      	cmp	r2, r3
 8003428:	d207      	bcs.n	800343a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <prvAddNewTaskToReadyList+0xdc>)
 800342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000c28 	.word	0x20000c28
 8003448:	20000754 	.word	0x20000754
 800344c:	20000c34 	.word	0x20000c34
 8003450:	20000c44 	.word	0x20000c44
 8003454:	20000c30 	.word	0x20000c30
 8003458:	20000758 	.word	0x20000758
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <vTaskDelay+0x60>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <vTaskDelay+0x30>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	60bb      	str	r3, [r7, #8]
}
 800348c:	bf00      	nop
 800348e:	e7fe      	b.n	800348e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003490:	f000 f880 	bl	8003594 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fcee 	bl	8003e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800349c:	f000 f888 	bl	80035b0 <xTaskResumeAll>
 80034a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <vTaskDelay+0x64>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000c50 	.word	0x20000c50
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034d6:	463a      	mov	r2, r7
 80034d8:	1d39      	adds	r1, r7, #4
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f860 	bl	80025a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	9202      	str	r2, [sp, #8]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	460a      	mov	r2, r1
 80034f6:	4921      	ldr	r1, [pc, #132]	; (800357c <vTaskStartScheduler+0xb4>)
 80034f8:	4821      	ldr	r0, [pc, #132]	; (8003580 <vTaskStartScheduler+0xb8>)
 80034fa:	f7ff fe19 	bl	8003130 <xTaskCreateStatic>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <vTaskStartScheduler+0xbc>)
 8003502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <vTaskStartScheduler+0xbc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e001      	b.n	8003516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d102      	bne.n	8003522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800351c:	f000 fd00 	bl	8003f20 <xTimerCreateTimerTask>
 8003520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d116      	bne.n	8003556 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	613b      	str	r3, [r7, #16]
}
 800353a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <vTaskStartScheduler+0xc0>)
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <vTaskStartScheduler+0xc4>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <vTaskStartScheduler+0xc8>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003550:	f001 f87a 	bl	8004648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003554:	e00e      	b.n	8003574 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d10a      	bne.n	8003574 <vTaskStartScheduler+0xac>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	60fb      	str	r3, [r7, #12]
}
 8003570:	bf00      	nop
 8003572:	e7fe      	b.n	8003572 <vTaskStartScheduler+0xaa>
}
 8003574:	bf00      	nop
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	0800571c 	.word	0x0800571c
 8003580:	08003bad 	.word	0x08003bad
 8003584:	20000c4c 	.word	0x20000c4c
 8003588:	20000c48 	.word	0x20000c48
 800358c:	20000c34 	.word	0x20000c34
 8003590:	20000c2c 	.word	0x20000c2c

08003594 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <vTaskSuspendAll+0x18>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	4a03      	ldr	r2, [pc, #12]	; (80035ac <vTaskSuspendAll+0x18>)
 80035a0:	6013      	str	r3, [r2, #0]
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000c50 	.word	0x20000c50

080035b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035be:	4b42      	ldr	r3, [pc, #264]	; (80036c8 <xTaskResumeAll+0x118>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <xTaskResumeAll+0x2c>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	603b      	str	r3, [r7, #0]
}
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035dc:	f001 f8a6 	bl	800472c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <xTaskResumeAll+0x118>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <xTaskResumeAll+0x118>)
 80035e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ea:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <xTaskResumeAll+0x118>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d162      	bne.n	80036b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <xTaskResumeAll+0x11c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d05e      	beq.n	80036b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035fa:	e02f      	b.n	800365c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035fc:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <xTaskResumeAll+0x120>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3318      	adds	r3, #24
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f883 	bl	8002714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff f87e 	bl	8002714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <xTaskResumeAll+0x124>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d903      	bls.n	800362c <xTaskResumeAll+0x7c>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <xTaskResumeAll+0x124>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4a27      	ldr	r2, [pc, #156]	; (80036d8 <xTaskResumeAll+0x128>)
 800363a:	441a      	add	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7ff f80b 	bl	800265e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <xTaskResumeAll+0x12c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <xTaskResumeAll+0x130>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <xTaskResumeAll+0x120>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1cb      	bne.n	80035fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800366a:	f000 fb55 	bl	8003d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <xTaskResumeAll+0x134>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800367a:	f000 f845 	bl	8003708 <xTaskIncrementTick>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <xTaskResumeAll+0x130>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3b01      	subs	r3, #1
 800368e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f1      	bne.n	800367a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <xTaskResumeAll+0x134>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <xTaskResumeAll+0x130>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036a4:	2301      	movs	r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <xTaskResumeAll+0x138>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036b8:	f001 f868 	bl	800478c <vPortExitCritical>

	return xAlreadyYielded;
 80036bc:	68bb      	ldr	r3, [r7, #8]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000c50 	.word	0x20000c50
 80036cc:	20000c28 	.word	0x20000c28
 80036d0:	20000be8 	.word	0x20000be8
 80036d4:	20000c30 	.word	0x20000c30
 80036d8:	20000758 	.word	0x20000758
 80036dc:	20000754 	.word	0x20000754
 80036e0:	20000c3c 	.word	0x20000c3c
 80036e4:	20000c38 	.word	0x20000c38
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <xTaskGetTickCount+0x18>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036f8:	687b      	ldr	r3, [r7, #4]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	20000c2c 	.word	0x20000c2c

08003708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003712:	4b51      	ldr	r3, [pc, #324]	; (8003858 <xTaskIncrementTick+0x150>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 808e 	bne.w	8003838 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800371c:	4b4f      	ldr	r3, [pc, #316]	; (800385c <xTaskIncrementTick+0x154>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003724:	4a4d      	ldr	r2, [pc, #308]	; (800385c <xTaskIncrementTick+0x154>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d120      	bne.n	8003772 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <xTaskIncrementTick+0x158>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <xTaskIncrementTick+0x48>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	603b      	str	r3, [r7, #0]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xTaskIncrementTick+0x46>
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <xTaskIncrementTick+0x158>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	4b43      	ldr	r3, [pc, #268]	; (8003864 <xTaskIncrementTick+0x15c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a41      	ldr	r2, [pc, #260]	; (8003860 <xTaskIncrementTick+0x158>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4a41      	ldr	r2, [pc, #260]	; (8003864 <xTaskIncrementTick+0x15c>)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b40      	ldr	r3, [pc, #256]	; (8003868 <xTaskIncrementTick+0x160>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	4a3f      	ldr	r2, [pc, #252]	; (8003868 <xTaskIncrementTick+0x160>)
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	f000 fad3 	bl	8003d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <xTaskIncrementTick+0x164>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	429a      	cmp	r2, r3
 800377a:	d34e      	bcc.n	800381a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <xTaskIncrementTick+0x158>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <xTaskIncrementTick+0x82>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xTaskIncrementTick+0x84>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003790:	4b36      	ldr	r3, [pc, #216]	; (800386c <xTaskIncrementTick+0x164>)
 8003792:	f04f 32ff 	mov.w	r2, #4294967295
 8003796:	601a      	str	r2, [r3, #0]
					break;
 8003798:	e03f      	b.n	800381a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <xTaskIncrementTick+0x158>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d203      	bcs.n	80037ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037b2:	4a2e      	ldr	r2, [pc, #184]	; (800386c <xTaskIncrementTick+0x164>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6013      	str	r3, [r2, #0]
						break;
 80037b8:	e02f      	b.n	800381a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3304      	adds	r3, #4
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe ffa8 	bl	8002714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3318      	adds	r3, #24
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe ff9f 	bl	8002714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037da:	4b25      	ldr	r3, [pc, #148]	; (8003870 <xTaskIncrementTick+0x168>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d903      	bls.n	80037ea <xTaskIncrementTick+0xe2>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	4a22      	ldr	r2, [pc, #136]	; (8003870 <xTaskIncrementTick+0x168>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <xTaskIncrementTick+0x16c>)
 80037f8:	441a      	add	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3304      	adds	r3, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f7fe ff2c 	bl	800265e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <xTaskIncrementTick+0x170>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	429a      	cmp	r2, r3
 8003812:	d3b3      	bcc.n	800377c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003818:	e7b0      	b.n	800377c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <xTaskIncrementTick+0x170>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4914      	ldr	r1, [pc, #80]	; (8003874 <xTaskIncrementTick+0x16c>)
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d907      	bls.n	8003842 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e004      	b.n	8003842 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003838:	4b10      	ldr	r3, [pc, #64]	; (800387c <xTaskIncrementTick+0x174>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	4a0f      	ldr	r2, [pc, #60]	; (800387c <xTaskIncrementTick+0x174>)
 8003840:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <xTaskIncrementTick+0x178>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800384a:	2301      	movs	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000c50 	.word	0x20000c50
 800385c:	20000c2c 	.word	0x20000c2c
 8003860:	20000be0 	.word	0x20000be0
 8003864:	20000be4 	.word	0x20000be4
 8003868:	20000c40 	.word	0x20000c40
 800386c:	20000c48 	.word	0x20000c48
 8003870:	20000c30 	.word	0x20000c30
 8003874:	20000758 	.word	0x20000758
 8003878:	20000754 	.word	0x20000754
 800387c:	20000c38 	.word	0x20000c38
 8003880:	20000c3c 	.word	0x20000c3c

08003884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800388a:	4b27      	ldr	r3, [pc, #156]	; (8003928 <vTaskSwitchContext+0xa4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <vTaskSwitchContext+0xa8>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003898:	e041      	b.n	800391e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <vTaskSwitchContext+0xa8>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <vTaskSwitchContext+0xac>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e010      	b.n	80038ca <vTaskSwitchContext+0x46>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <vTaskSwitchContext+0x3e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	491a      	ldr	r1, [pc, #104]	; (8003934 <vTaskSwitchContext+0xb0>)
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0e4      	beq.n	80038a8 <vTaskSwitchContext+0x24>
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4a12      	ldr	r2, [pc, #72]	; (8003934 <vTaskSwitchContext+0xb0>)
 80038ea:	4413      	add	r3, r2
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3308      	adds	r3, #8
 8003900:	429a      	cmp	r2, r3
 8003902:	d104      	bne.n	800390e <vTaskSwitchContext+0x8a>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <vTaskSwitchContext+0xb4>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <vTaskSwitchContext+0xac>)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	20000c50 	.word	0x20000c50
 800392c:	20000c3c 	.word	0x20000c3c
 8003930:	20000c30 	.word	0x20000c30
 8003934:	20000758 	.word	0x20000758
 8003938:	20000754 	.word	0x20000754

0800393c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	60fb      	str	r3, [r7, #12]
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <vTaskPlaceOnEventList+0x44>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3318      	adds	r3, #24
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fe fe9a 	bl	80026a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003970:	2101      	movs	r1, #1
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f000 fa80 	bl	8003e78 <prvAddCurrentTaskToDelayedList>
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000754 	.word	0x20000754

08003984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	617b      	str	r3, [r7, #20]
}
 80039a8:	bf00      	nop
 80039aa:	e7fe      	b.n	80039aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3318      	adds	r3, #24
 80039b2:	4619      	mov	r1, r3
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7fe fe52 	bl	800265e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f000 fa55 	bl	8003e78 <prvAddCurrentTaskToDelayedList>
	}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000754 	.word	0x20000754

080039dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60fb      	str	r3, [r7, #12]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	3318      	adds	r3, #24
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fe81 	bl	8002714 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <xTaskRemoveFromEventList+0xb0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fe78 	bl	8002714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <xTaskRemoveFromEventList+0xb4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d903      	bls.n	8003a38 <xTaskRemoveFromEventList+0x5c>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <xTaskRemoveFromEventList+0xb4>)
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <xTaskRemoveFromEventList+0xb8>)
 8003a46:	441a      	add	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7fe fe05 	bl	800265e <vListInsertEnd>
 8003a54:	e005      	b.n	8003a62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3318      	adds	r3, #24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	480e      	ldr	r0, [pc, #56]	; (8003a98 <xTaskRemoveFromEventList+0xbc>)
 8003a5e:	f7fe fdfe 	bl	800265e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <xTaskRemoveFromEventList+0xc0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d905      	bls.n	8003a7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <xTaskRemoveFromEventList+0xc4>)
 8003a76:	2201      	movs	r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e001      	b.n	8003a80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a80:	697b      	ldr	r3, [r7, #20]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000c50 	.word	0x20000c50
 8003a90:	20000c30 	.word	0x20000c30
 8003a94:	20000758 	.word	0x20000758
 8003a98:	20000be8 	.word	0x20000be8
 8003a9c:	20000754 	.word	0x20000754
 8003aa0:	20000c3c 	.word	0x20000c3c

08003aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <vTaskInternalSetTimeOutState+0x24>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <vTaskInternalSetTimeOutState+0x28>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000c40 	.word	0x20000c40
 8003acc:	20000c2c 	.word	0x20000c2c

08003ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60fb      	str	r3, [r7, #12]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b12:	f000 fe0b 	bl	800472c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <xTaskCheckForTimeOut+0xbc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d102      	bne.n	8003b36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	e023      	b.n	8003b7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <xTaskCheckForTimeOut+0xc0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d007      	beq.n	8003b52 <xTaskCheckForTimeOut+0x82>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	e015      	b.n	8003b7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d20b      	bcs.n	8003b74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff9b 	bl	8003aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e004      	b.n	8003b7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b7e:	f000 fe05 	bl	800478c <vPortExitCritical>

	return xReturn;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000c2c 	.word	0x20000c2c
 8003b90:	20000c40 	.word	0x20000c40

08003b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <vTaskMissedYield+0x14>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000c3c 	.word	0x20000c3c

08003bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bb4:	f000 f852 	bl	8003c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <prvIdleTask+0x28>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d9f9      	bls.n	8003bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <prvIdleTask+0x2c>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bd0:	e7f0      	b.n	8003bb4 <prvIdleTask+0x8>
 8003bd2:	bf00      	nop
 8003bd4:	20000758 	.word	0x20000758
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e00c      	b.n	8003c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <prvInitialiseTaskLists+0x60>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fd06 	bl	8002608 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b37      	cmp	r3, #55	; 0x37
 8003c06:	d9ef      	bls.n	8003be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c0a:	f7fe fcfd 	bl	8002608 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c0e:	480d      	ldr	r0, [pc, #52]	; (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c10:	f7fe fcfa 	bl	8002608 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <prvInitialiseTaskLists+0x6c>)
 8003c16:	f7fe fcf7 	bl	8002608 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c1a:	480c      	ldr	r0, [pc, #48]	; (8003c4c <prvInitialiseTaskLists+0x70>)
 8003c1c:	f7fe fcf4 	bl	8002608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c20:	480b      	ldr	r0, [pc, #44]	; (8003c50 <prvInitialiseTaskLists+0x74>)
 8003c22:	f7fe fcf1 	bl	8002608 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <prvInitialiseTaskLists+0x78>)
 8003c28:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <prvInitialiseTaskLists+0x7c>)
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000758 	.word	0x20000758
 8003c40:	20000bb8 	.word	0x20000bb8
 8003c44:	20000bcc 	.word	0x20000bcc
 8003c48:	20000be8 	.word	0x20000be8
 8003c4c:	20000bfc 	.word	0x20000bfc
 8003c50:	20000c14 	.word	0x20000c14
 8003c54:	20000be0 	.word	0x20000be0
 8003c58:	20000be4 	.word	0x20000be4

08003c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c62:	e019      	b.n	8003c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c64:	f000 fd62 	bl	800472c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <prvCheckTasksWaitingTermination+0x50>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fd4d 	bl	8002714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c8e:	f000 fd7d 	bl	800478c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f810 	bl	8003cb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <prvCheckTasksWaitingTermination+0x58>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e1      	bne.n	8003c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000bfc 	.word	0x20000bfc
 8003cb0:	20000c28 	.word	0x20000c28
 8003cb4:	20000c10 	.word	0x20000c10

08003cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d108      	bne.n	8003cdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fef0 	bl	8004ab4 <vPortFree>
				vPortFree( pxTCB );
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 feed 	bl	8004ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cda:	e018      	b.n	8003d0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d103      	bne.n	8003cee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fee4 	bl	8004ab4 <vPortFree>
	}
 8003cec:	e00f      	b.n	8003d0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d00a      	beq.n	8003d0e <prvDeleteTCB+0x56>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	60fb      	str	r3, [r7, #12]
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <prvDeleteTCB+0x54>
	}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <prvResetNextTaskUnblockTime+0x40>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <prvResetNextTaskUnblockTime+0x14>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <prvResetNextTaskUnblockTime+0x16>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <prvResetNextTaskUnblockTime+0x44>)
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d3a:	e008      	b.n	8003d4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <prvResetNextTaskUnblockTime+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <prvResetNextTaskUnblockTime+0x44>)
 8003d4c:	6013      	str	r3, [r2, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	20000be0 	.word	0x20000be0
 8003d5c:	20000c48 	.word	0x20000c48

08003d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <xTaskGetSchedulerState+0x34>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	e008      	b.n	8003d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <xTaskGetSchedulerState+0x38>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	607b      	str	r3, [r7, #4]
 8003d80:	e001      	b.n	8003d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d86:	687b      	ldr	r3, [r7, #4]
	}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000c34 	.word	0x20000c34
 8003d98:	20000c50 	.word	0x20000c50

08003d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d056      	beq.n	8003e60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003db2:	4b2e      	ldr	r3, [pc, #184]	; (8003e6c <xTaskPriorityDisinherit+0xd0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d00a      	beq.n	8003dd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60fb      	str	r3, [r7, #12]
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
}
 8003dec:	bf00      	nop
 8003dee:	e7fe      	b.n	8003dee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d02c      	beq.n	8003e60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d128      	bne.n	8003e60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fc7e 	bl	8002714 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <xTaskPriorityDisinherit+0xd4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d903      	bls.n	8003e40 <xTaskPriorityDisinherit+0xa4>
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <xTaskPriorityDisinherit+0xd4>)
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <xTaskPriorityDisinherit+0xd8>)
 8003e4e:	441a      	add	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f7fe fc01 	bl	800265e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e60:	697b      	ldr	r3, [r7, #20]
	}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000754 	.word	0x20000754
 8003e70:	20000c30 	.word	0x20000c30
 8003e74:	20000758 	.word	0x20000758

08003e78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e82:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fc40 	bl	8002714 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d10a      	bne.n	8003eb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4819      	ldr	r0, [pc, #100]	; (8003f10 <prvAddCurrentTaskToDelayedList+0x98>)
 8003eac:	f7fe fbd7 	bl	800265e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003eb0:	e026      	b.n	8003f00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d209      	bcs.n	8003ede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fe fbe4 	bl	80026a4 <vListInsert>
}
 8003edc:	e010      	b.n	8003f00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f7fe fbda 	bl	80026a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d202      	bcs.n	8003f00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000c2c 	.word	0x20000c2c
 8003f0c:	20000754 	.word	0x20000754
 8003f10:	20000c14 	.word	0x20000c14
 8003f14:	20000be4 	.word	0x20000be4
 8003f18:	20000be0 	.word	0x20000be0
 8003f1c:	20000c48 	.word	0x20000c48

08003f20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f2a:	f000 facb 	bl	80044c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <xTimerCreateTimerTask+0x80>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d021      	beq.n	8003f7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f3e:	1d3a      	adds	r2, r7, #4
 8003f40:	f107 0108 	add.w	r1, r7, #8
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fb43 	bl	80025d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	9202      	str	r2, [sp, #8]
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2302      	movs	r3, #2
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	460a      	mov	r2, r1
 8003f60:	4910      	ldr	r1, [pc, #64]	; (8003fa4 <xTimerCreateTimerTask+0x84>)
 8003f62:	4811      	ldr	r0, [pc, #68]	; (8003fa8 <xTimerCreateTimerTask+0x88>)
 8003f64:	f7ff f8e4 	bl	8003130 <xTaskCreateStatic>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4a10      	ldr	r2, [pc, #64]	; (8003fac <xTimerCreateTimerTask+0x8c>)
 8003f6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <xTimerCreateTimerTask+0x8c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f76:	2301      	movs	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	613b      	str	r3, [r7, #16]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f96:	697b      	ldr	r3, [r7, #20]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000c84 	.word	0x20000c84
 8003fa4:	08005724 	.word	0x08005724
 8003fa8:	080040cd 	.word	0x080040cd
 8003fac:	20000c88 	.word	0x20000c88

08003fb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <xTimerGenericCommand+0x2e>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	623b      	str	r3, [r7, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <xTimerGenericCommand+0x98>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d02a      	beq.n	800403c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b05      	cmp	r3, #5
 8003ff6:	dc18      	bgt.n	800402a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ff8:	f7ff feb2 	bl	8003d60 <xTaskGetSchedulerState>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d109      	bne.n	8004016 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <xTimerGenericCommand+0x98>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f107 0110 	add.w	r1, r7, #16
 800400a:	2300      	movs	r3, #0
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	f7fe fcad 	bl	800296c <xQueueGenericSend>
 8004012:	6278      	str	r0, [r7, #36]	; 0x24
 8004014:	e012      	b.n	800403c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <xTimerGenericCommand+0x98>)
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f107 0110 	add.w	r1, r7, #16
 800401e:	2300      	movs	r3, #0
 8004020:	2200      	movs	r2, #0
 8004022:	f7fe fca3 	bl	800296c <xQueueGenericSend>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24
 8004028:	e008      	b.n	800403c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <xTimerGenericCommand+0x98>)
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	f107 0110 	add.w	r1, r7, #16
 8004032:	2300      	movs	r3, #0
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	f7fe fd97 	bl	8002b68 <xQueueGenericSendFromISR>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800403e:	4618      	mov	r0, r3
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000c84 	.word	0x20000c84

0800404c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004056:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <prvProcessExpiredTimer+0x7c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3304      	adds	r3, #4
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fb55 	bl	8002714 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d122      	bne.n	80040b8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	18d1      	adds	r1, r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f000 f8c8 	bl	8004214 <prvInsertTimerInActiveList>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800408a:	2300      	movs	r3, #0
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	2100      	movs	r1, #0
 8004094:	6978      	ldr	r0, [r7, #20]
 8004096:	f7ff ff8b 	bl	8003fb0 <xTimerGenericCommand>
 800409a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	6978      	ldr	r0, [r7, #20]
 80040be:	4798      	blx	r3
}
 80040c0:	bf00      	nop
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000c7c 	.word	0x20000c7c

080040cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040d4:	f107 0308 	add.w	r3, r7, #8
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f857 	bl	800418c <prvGetNextExpireTime>
 80040de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4619      	mov	r1, r3
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f803 	bl	80040f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040ea:	f000 f8d5 	bl	8004298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ee:	e7f1      	b.n	80040d4 <prvTimerTask+0x8>

080040f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040fa:	f7ff fa4b 	bl	8003594 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040fe:	f107 0308 	add.w	r3, r7, #8
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f866 	bl	80041d4 <prvSampleTimeNow>
 8004108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d130      	bne.n	8004172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <prvProcessTimerOrBlockTask+0x3c>
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	429a      	cmp	r2, r3
 800411c:	d806      	bhi.n	800412c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800411e:	f7ff fa47 	bl	80035b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004122:	68f9      	ldr	r1, [r7, #12]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff91 	bl	800404c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800412a:	e024      	b.n	8004176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <prvProcessTimerOrBlockTask+0x90>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <prvProcessTimerOrBlockTask+0x94>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	f7fe ffb9 	bl	80030c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004156:	f7ff fa2b 	bl	80035b0 <xTaskResumeAll>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <prvProcessTimerOrBlockTask+0x98>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
}
 8004170:	e001      	b.n	8004176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004172:	f7ff fa1d 	bl	80035b0 <xTaskResumeAll>
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000c80 	.word	0x20000c80
 8004184:	20000c84 	.word	0x20000c84
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <prvGetNextExpireTime+0x44>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <prvGetNextExpireTime+0x44>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e001      	b.n	80041c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000c7c 	.word	0x20000c7c

080041d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041dc:	f7ff fa86 	bl	80036ec <xTaskGetTickCount>
 80041e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <prvSampleTimeNow+0x3c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d205      	bcs.n	80041f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041ec:	f000 f908 	bl	8004400 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e002      	b.n	80041fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <prvSampleTimeNow+0x3c>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000c8c 	.word	0x20000c8c

08004214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d812      	bhi.n	8004260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e01b      	b.n	8004286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800424e:	4b10      	ldr	r3, [pc, #64]	; (8004290 <prvInsertTimerInActiveList+0x7c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f7fe fa23 	bl	80026a4 <vListInsert>
 800425e:	e012      	b.n	8004286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d206      	bcs.n	8004276 <prvInsertTimerInActiveList+0x62>
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e007      	b.n	8004286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <prvInsertTimerInActiveList+0x80>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7fe fa0f 	bl	80026a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004286:	697b      	ldr	r3, [r7, #20]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000c80 	.word	0x20000c80
 8004294:	20000c7c 	.word	0x20000c7c

08004298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
 800429c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800429e:	e09d      	b.n	80043dc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da18      	bge.n	80042d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042a6:	1d3b      	adds	r3, r7, #4
 80042a8:	3304      	adds	r3, #4
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	61fb      	str	r3, [r7, #28]
}
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ce:	6850      	ldr	r0, [r2, #4]
 80042d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d2:	6892      	ldr	r2, [r2, #8]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db7d      	blt.n	80043da <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	3304      	adds	r3, #4
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fa10 	bl	8002714 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042f4:	463b      	mov	r3, r7
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ff6c 	bl	80041d4 <prvSampleTimeNow>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b09      	cmp	r3, #9
 8004302:	d86b      	bhi.n	80043dc <prvProcessReceivedCommands+0x144>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <prvProcessReceivedCommands+0x74>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004335 	.word	0x08004335
 8004310:	08004335 	.word	0x08004335
 8004314:	08004335 	.word	0x08004335
 8004318:	080043dd 	.word	0x080043dd
 800431c:	08004391 	.word	0x08004391
 8004320:	080043c9 	.word	0x080043c9
 8004324:	08004335 	.word	0x08004335
 8004328:	08004335 	.word	0x08004335
 800432c:	080043dd 	.word	0x080043dd
 8004330:	08004391 	.word	0x08004391
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	18d1      	adds	r1, r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004342:	f7ff ff67 	bl	8004214 <prvInsertTimerInActiveList>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d047      	beq.n	80043dc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004352:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d13f      	bne.n	80043dc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	441a      	add	r2, r3
 8004364:	2300      	movs	r3, #0
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	2100      	movs	r1, #0
 800436c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436e:	f7ff fe1f 	bl	8003fb0 <xTimerGenericCommand>
 8004372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d130      	bne.n	80043dc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61bb      	str	r3, [r7, #24]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	617b      	str	r3, [r7, #20]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	18d1      	adds	r1, r2, r3
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c2:	f7ff ff27 	bl	8004214 <prvInsertTimerInActiveList>
					break;
 80043c6:	e009      	b.n	80043dc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80043d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d4:	f000 fb6e 	bl	8004ab4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043d8:	e000      	b.n	80043dc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <prvProcessReceivedCommands+0x164>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	1d39      	adds	r1, r7, #4
 80043e2:	2200      	movs	r2, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fc57 	bl	8002c98 <xQueueReceive>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f af57 	bne.w	80042a0 <prvProcessReceivedCommands+0x8>
	}
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	3730      	adds	r7, #48	; 0x30
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000c84 	.word	0x20000c84

08004400 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004406:	e045      	b.n	8004494 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <prvSwitchTimerLists+0xbc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <prvSwitchTimerLists+0xbc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe f977 	bl	8002714 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d12e      	bne.n	8004494 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d90e      	bls.n	8004466 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <prvSwitchTimerLists+0xbc>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fe f920 	bl	80026a4 <vListInsert>
 8004464:	e016      	b.n	8004494 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	2100      	movs	r1, #0
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fd9d 	bl	8003fb0 <xTimerGenericCommand>
 8004476:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <prvSwitchTimerLists+0x94>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	603b      	str	r3, [r7, #0]
}
 8004490:	bf00      	nop
 8004492:	e7fe      	b.n	8004492 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <prvSwitchTimerLists+0xbc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1b4      	bne.n	8004408 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <prvSwitchTimerLists+0xbc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <prvSwitchTimerLists+0xbc>)
 80044aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <prvSwitchTimerLists+0xc0>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	6013      	str	r3, [r2, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000c7c 	.word	0x20000c7c
 80044c0:	20000c80 	.word	0x20000c80

080044c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044ca:	f000 f92f 	bl	800472c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ce:	4b15      	ldr	r3, [pc, #84]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d120      	bne.n	8004518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044d6:	4814      	ldr	r0, [pc, #80]	; (8004528 <prvCheckForValidListAndQueue+0x64>)
 80044d8:	f7fe f896 	bl	8002608 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044dc:	4813      	ldr	r0, [pc, #76]	; (800452c <prvCheckForValidListAndQueue+0x68>)
 80044de:	f7fe f893 	bl	8002608 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <prvCheckForValidListAndQueue+0x6c>)
 80044e4:	4a10      	ldr	r2, [pc, #64]	; (8004528 <prvCheckForValidListAndQueue+0x64>)
 80044e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <prvCheckForValidListAndQueue+0x70>)
 80044ea:	4a10      	ldr	r2, [pc, #64]	; (800452c <prvCheckForValidListAndQueue+0x68>)
 80044ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <prvCheckForValidListAndQueue+0x74>)
 80044f4:	4a11      	ldr	r2, [pc, #68]	; (800453c <prvCheckForValidListAndQueue+0x78>)
 80044f6:	2110      	movs	r1, #16
 80044f8:	200a      	movs	r0, #10
 80044fa:	f7fe f99d 	bl	8002838 <xQueueGenericCreateStatic>
 80044fe:	4603      	mov	r3, r0
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 8004502:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <prvCheckForValidListAndQueue+0x60>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	490b      	ldr	r1, [pc, #44]	; (8004540 <prvCheckForValidListAndQueue+0x7c>)
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fdb0 	bl	8003078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004518:	f000 f938 	bl	800478c <vPortExitCritical>
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000c84 	.word	0x20000c84
 8004528:	20000c54 	.word	0x20000c54
 800452c:	20000c68 	.word	0x20000c68
 8004530:	20000c7c 	.word	0x20000c7c
 8004534:	20000c80 	.word	0x20000c80
 8004538:	20000d30 	.word	0x20000d30
 800453c:	20000c90 	.word	0x20000c90
 8004540:	0800572c 	.word	0x0800572c

08004544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b04      	subs	r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800455c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b04      	subs	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3b04      	subs	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004574:	4a08      	ldr	r2, [pc, #32]	; (8004598 <pxPortInitialiseStack+0x54>)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3b14      	subs	r3, #20
 800457e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b20      	subs	r3, #32
 800458a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800458c:	68fb      	ldr	r3, [r7, #12]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	0800459d 	.word	0x0800459d

0800459c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <prvTaskExitError+0x54>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d00a      	beq.n	80045c6 <prvTaskExitError+0x2a>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60fb      	str	r3, [r7, #12]
}
 80045c2:	bf00      	nop
 80045c4:	e7fe      	b.n	80045c4 <prvTaskExitError+0x28>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60bb      	str	r3, [r7, #8]
}
 80045d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045da:	bf00      	nop
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0fc      	beq.n	80045dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2000000c 	.word	0x2000000c
	...

08004600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <pxCurrentTCBConst2>)
 8004602:	6819      	ldr	r1, [r3, #0]
 8004604:	6808      	ldr	r0, [r1, #0]
 8004606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800460a:	f380 8809 	msr	PSP, r0
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f380 8811 	msr	BASEPRI, r0
 800461a:	f04e 0e0d 	orr.w	lr, lr, #13
 800461e:	4770      	bx	lr

08004620 <pxCurrentTCBConst2>:
 8004620:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop

08004628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004628:	4806      	ldr	r0, [pc, #24]	; (8004644 <prvPortStartFirstTask+0x1c>)
 800462a:	6800      	ldr	r0, [r0, #0]
 800462c:	6800      	ldr	r0, [r0, #0]
 800462e:	f380 8808 	msr	MSP, r0
 8004632:	b662      	cpsie	i
 8004634:	b661      	cpsie	f
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	df00      	svc	0
 8004640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004642:	bf00      	nop
 8004644:	e000ed08 	.word	0xe000ed08

08004648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800464e:	4b32      	ldr	r3, [pc, #200]	; (8004718 <xPortStartScheduler+0xd0>)
 8004650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	22ff      	movs	r2, #255	; 0xff
 800465e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4b2a      	ldr	r3, [pc, #168]	; (800471c <xPortStartScheduler+0xd4>)
 8004674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <xPortStartScheduler+0xd8>)
 8004678:	2207      	movs	r2, #7
 800467a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800467c:	e009      	b.n	8004692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <xPortStartScheduler+0xd8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3b01      	subs	r3, #1
 8004684:	4a26      	ldr	r2, [pc, #152]	; (8004720 <xPortStartScheduler+0xd8>)
 8004686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d0ef      	beq.n	800467e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <xPortStartScheduler+0xd8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1c3 0307 	rsb	r3, r3, #7
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d00a      	beq.n	80046c0 <xPortStartScheduler+0x78>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60bb      	str	r3, [r7, #8]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <xPortStartScheduler+0xd8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	021b      	lsls	r3, r3, #8
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <xPortStartScheduler+0xd8>)
 80046c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <xPortStartScheduler+0xd8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046d2:	4a13      	ldr	r2, [pc, #76]	; (8004720 <xPortStartScheduler+0xd8>)
 80046d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <xPortStartScheduler+0xdc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a10      	ldr	r2, [pc, #64]	; (8004724 <xPortStartScheduler+0xdc>)
 80046e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <xPortStartScheduler+0xdc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <xPortStartScheduler+0xdc>)
 80046f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046f6:	f000 f8b9 	bl	800486c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <xPortStartScheduler+0xe0>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004700:	f7ff ff92 	bl	8004628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004704:	f7ff f8be 	bl	8003884 <vTaskSwitchContext>
	prvTaskExitError();
 8004708:	f7ff ff48 	bl	800459c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	e000e400 	.word	0xe000e400
 800471c:	20000d80 	.word	0x20000d80
 8004720:	20000d84 	.word	0x20000d84
 8004724:	e000ed20 	.word	0xe000ed20
 8004728:	2000000c 	.word	0x2000000c

0800472c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
}
 8004744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <vPortEnterCritical+0x58>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <vPortEnterCritical+0x58>)
 800474e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <vPortEnterCritical+0x58>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10f      	bne.n	8004778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <vPortEnterCritical+0x5c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <vPortEnterCritical+0x4c>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	603b      	str	r3, [r7, #0]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vPortEnterCritical+0x4a>
	}
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000000c 	.word	0x2000000c
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <vPortExitCritical+0x4c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <vPortExitCritical+0x24>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	607b      	str	r3, [r7, #4]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <vPortExitCritical+0x4c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <vPortExitCritical+0x4c>)
 80047b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047ba:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <vPortExitCritical+0x4c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d105      	bne.n	80047ce <vPortExitCritical+0x42>
 80047c2:	2300      	movs	r3, #0
 80047c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	f383 8811 	msr	BASEPRI, r3
}
 80047cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	2000000c 	.word	0x2000000c
 80047dc:	00000000 	.word	0x00000000

080047e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047e0:	f3ef 8009 	mrs	r0, PSP
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <pxCurrentTCBConst>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80047f0:	6010      	str	r0, [r2, #0]
 80047f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80047f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047fa:	f380 8811 	msr	BASEPRI, r0
 80047fe:	f7ff f841 	bl	8003884 <vTaskSwitchContext>
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8811 	msr	BASEPRI, r0
 800480a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004816:	f380 8809 	msr	PSP, r0
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	4770      	bx	lr

08004820 <pxCurrentTCBConst>:
 8004820:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004842:	f7fe ff61 	bl	8003708 <xTaskIncrementTick>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <SysTick_Handler+0x40>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f383 8811 	msr	BASEPRI, r3
}
 800485e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x30>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <vPortSetupTimerInterrupt+0x38>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <vPortSetupTimerInterrupt+0x3c>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <vPortSetupTimerInterrupt+0x40>)
 800488a:	3b01      	subs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800488e:	4b03      	ldr	r3, [pc, #12]	; (800489c <vPortSetupTimerInterrupt+0x30>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	e000e010 	.word	0xe000e010
 80048a0:	e000e018 	.word	0xe000e018
 80048a4:	20000000 	.word	0x20000000
 80048a8:	10624dd3 	.word	0x10624dd3
 80048ac:	e000e014 	.word	0xe000e014

080048b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	d914      	bls.n	80048ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048c2:	4a16      	ldr	r2, [pc, #88]	; (800491c <vPortValidateInterruptPriority+0x6c>)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048cc:	4b14      	ldr	r3, [pc, #80]	; (8004920 <vPortValidateInterruptPriority+0x70>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	7afa      	ldrb	r2, [r7, #11]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d20a      	bcs.n	80048ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	607b      	str	r3, [r7, #4]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <vPortValidateInterruptPriority+0x74>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <vPortValidateInterruptPriority+0x78>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d90a      	bls.n	8004912 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	603b      	str	r3, [r7, #0]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <vPortValidateInterruptPriority+0x60>
	}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	e000e3f0 	.word	0xe000e3f0
 8004920:	20000d80 	.word	0x20000d80
 8004924:	e000ed0c 	.word	0xe000ed0c
 8004928:	20000d84 	.word	0x20000d84

0800492c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004938:	f7fe fe2c 	bl	8003594 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800493c:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <pvPortMalloc+0x174>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004944:	f000 f910 	bl	8004b68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004948:	4b56      	ldr	r3, [pc, #344]	; (8004aa4 <pvPortMalloc+0x178>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 808e 	bne.w	8004a72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01d      	beq.n	8004998 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800495c:	2208      	movs	r2, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	2b00      	cmp	r3, #0
 800496c:	d014      	beq.n	8004998 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f023 0307 	bic.w	r3, r3, #7
 8004974:	3308      	adds	r3, #8
 8004976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <pvPortMalloc+0x6c>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	617b      	str	r3, [r7, #20]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d069      	beq.n	8004a72 <pvPortMalloc+0x146>
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <pvPortMalloc+0x17c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d864      	bhi.n	8004a72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049a8:	4b40      	ldr	r3, [pc, #256]	; (8004aac <pvPortMalloc+0x180>)
 80049aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049ac:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <pvPortMalloc+0x180>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b2:	e004      	b.n	80049be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <pvPortMalloc+0xa4>
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f1      	bne.n	80049b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049d0:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <pvPortMalloc+0x174>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d04b      	beq.n	8004a72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2208      	movs	r2, #8
 80049e0:	4413      	add	r3, r2
 80049e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	1ad2      	subs	r2, r2, r3
 80049f4:	2308      	movs	r3, #8
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d91f      	bls.n	8004a3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <pvPortMalloc+0xf8>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	613b      	str	r3, [r7, #16]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad2      	subs	r2, r2, r3
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a36:	69b8      	ldr	r0, [r7, #24]
 8004a38:	f000 f8f8 	bl	8004c2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <pvPortMalloc+0x17c>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <pvPortMalloc+0x17c>)
 8004a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a4a:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <pvPortMalloc+0x17c>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <pvPortMalloc+0x184>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d203      	bcs.n	8004a5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <pvPortMalloc+0x17c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <pvPortMalloc+0x184>)
 8004a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <pvPortMalloc+0x178>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a72:	f7fe fd9d 	bl	80035b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <pvPortMalloc+0x16a>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60fb      	str	r3, [r7, #12]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <pvPortMalloc+0x168>
	return pvReturn;
 8004a96:	69fb      	ldr	r3, [r7, #28]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	; 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20001990 	.word	0x20001990
 8004aa4:	2000199c 	.word	0x2000199c
 8004aa8:	20001994 	.word	0x20001994
 8004aac:	20001988 	.word	0x20001988
 8004ab0:	20001998 	.word	0x20001998

08004ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d048      	beq.n	8004b58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	425b      	negs	r3, r3
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <vPortFree+0xac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <vPortFree+0x44>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60fb      	str	r3, [r7, #12]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <vPortFree+0x62>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60bb      	str	r3, [r7, #8]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <vPortFree+0xac>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d019      	beq.n	8004b58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d115      	bne.n	8004b58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <vPortFree+0xac>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b3c:	f7fe fd2a 	bl	8003594 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <vPortFree+0xb0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	4a06      	ldr	r2, [pc, #24]	; (8004b64 <vPortFree+0xb0>)
 8004b4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b4e:	6938      	ldr	r0, [r7, #16]
 8004b50:	f000 f86c 	bl	8004c2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b54:	f7fe fd2c 	bl	80035b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b58:	bf00      	nop
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	2000199c 	.word	0x2000199c
 8004b64:	20001994 	.word	0x20001994

08004b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <prvHeapInit+0xac>)
 8004b76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3307      	adds	r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0307 	bic.w	r3, r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <prvHeapInit+0xac>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ba0:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <prvHeapInit+0xb0>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ba6:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <prvHeapInit+0xb0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <prvHeapInit+0xb4>)
 8004bc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <prvHeapInit+0xb4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <prvHeapInit+0xb4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	1ad2      	subs	r2, r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <prvHeapInit+0xb4>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <prvHeapInit+0xb8>)
 8004bf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <prvHeapInit+0xbc>)
 8004bfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <prvHeapInit+0xc0>)
 8004c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c06:	601a      	str	r2, [r3, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000d88 	.word	0x20000d88
 8004c18:	20001988 	.word	0x20001988
 8004c1c:	20001990 	.word	0x20001990
 8004c20:	20001998 	.word	0x20001998
 8004c24:	20001994 	.word	0x20001994
 8004c28:	2000199c 	.word	0x2000199c

08004c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <prvInsertBlockIntoFreeList+0xa8>)
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	e002      	b.n	8004c40 <prvInsertBlockIntoFreeList+0x14>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d8f7      	bhi.n	8004c3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4413      	add	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d108      	bne.n	8004c6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	441a      	add	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d118      	bne.n	8004cb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <prvInsertBlockIntoFreeList+0xac>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d00d      	beq.n	8004caa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	441a      	add	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e008      	b.n	8004cbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <prvInsertBlockIntoFreeList+0xac>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e003      	b.n	8004cbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d002      	beq.n	8004cca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	20001988 	.word	0x20001988
 8004cd8:	20001990 	.word	0x20001990

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	; (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000010 	.word	0x20000010

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	2600      	movs	r6, #0
 8004cec:	4d0c      	ldr	r5, [pc, #48]	; (8004d20 <__libc_init_array+0x38>)
 8004cee:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	f000 fcf2 	bl	80056e0 <_init>
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	4d0a      	ldr	r5, [pc, #40]	; (8004d28 <__libc_init_array+0x40>)
 8004d00:	4c0a      	ldr	r4, [pc, #40]	; (8004d2c <__libc_init_array+0x44>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08006238 	.word	0x08006238
 8004d24:	08006238 	.word	0x08006238
 8004d28:	08006238 	.word	0x08006238
 8004d2c:	0800623c 	.word	0x0800623c

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	4291      	cmp	r1, r2
 8004d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <memset>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4402      	add	r2, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <_puts_r>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	460e      	mov	r6, r1
 8004d60:	4605      	mov	r5, r0
 8004d62:	b118      	cbz	r0, 8004d6c <_puts_r+0x10>
 8004d64:	6983      	ldr	r3, [r0, #24]
 8004d66:	b90b      	cbnz	r3, 8004d6c <_puts_r+0x10>
 8004d68:	f000 fa48 	bl	80051fc <__sinit>
 8004d6c:	69ab      	ldr	r3, [r5, #24]
 8004d6e:	68ac      	ldr	r4, [r5, #8]
 8004d70:	b913      	cbnz	r3, 8004d78 <_puts_r+0x1c>
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 fa42 	bl	80051fc <__sinit>
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <_puts_r+0xd0>)
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d120      	bne.n	8004dc0 <_puts_r+0x64>
 8004d7e:	686c      	ldr	r4, [r5, #4]
 8004d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d82:	07db      	lsls	r3, r3, #31
 8004d84:	d405      	bmi.n	8004d92 <_puts_r+0x36>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	0598      	lsls	r0, r3, #22
 8004d8a:	d402      	bmi.n	8004d92 <_puts_r+0x36>
 8004d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8e:	f000 fad3 	bl	8005338 <__retarget_lock_acquire_recursive>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	0719      	lsls	r1, r3, #28
 8004d96:	d51d      	bpl.n	8004dd4 <_puts_r+0x78>
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	b1db      	cbz	r3, 8004dd4 <_puts_r+0x78>
 8004d9c:	3e01      	subs	r6, #1
 8004d9e:	68a3      	ldr	r3, [r4, #8]
 8004da0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004da4:	3b01      	subs	r3, #1
 8004da6:	60a3      	str	r3, [r4, #8]
 8004da8:	bb39      	cbnz	r1, 8004dfa <_puts_r+0x9e>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da38      	bge.n	8004e20 <_puts_r+0xc4>
 8004dae:	4622      	mov	r2, r4
 8004db0:	210a      	movs	r1, #10
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 f848 	bl	8004e48 <__swbuf_r>
 8004db8:	3001      	adds	r0, #1
 8004dba:	d011      	beq.n	8004de0 <_puts_r+0x84>
 8004dbc:	250a      	movs	r5, #10
 8004dbe:	e011      	b.n	8004de4 <_puts_r+0x88>
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <_puts_r+0xd4>)
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d101      	bne.n	8004dca <_puts_r+0x6e>
 8004dc6:	68ac      	ldr	r4, [r5, #8]
 8004dc8:	e7da      	b.n	8004d80 <_puts_r+0x24>
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <_puts_r+0xd8>)
 8004dcc:	429c      	cmp	r4, r3
 8004dce:	bf08      	it	eq
 8004dd0:	68ec      	ldreq	r4, [r5, #12]
 8004dd2:	e7d5      	b.n	8004d80 <_puts_r+0x24>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 f888 	bl	8004eec <__swsetup_r>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d0dd      	beq.n	8004d9c <_puts_r+0x40>
 8004de0:	f04f 35ff 	mov.w	r5, #4294967295
 8004de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de6:	07da      	lsls	r2, r3, #31
 8004de8:	d405      	bmi.n	8004df6 <_puts_r+0x9a>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	059b      	lsls	r3, r3, #22
 8004dee:	d402      	bmi.n	8004df6 <_puts_r+0x9a>
 8004df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df2:	f000 faa2 	bl	800533a <__retarget_lock_release_recursive>
 8004df6:	4628      	mov	r0, r5
 8004df8:	bd70      	pop	{r4, r5, r6, pc}
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da04      	bge.n	8004e08 <_puts_r+0xac>
 8004dfe:	69a2      	ldr	r2, [r4, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dc06      	bgt.n	8004e12 <_puts_r+0xb6>
 8004e04:	290a      	cmp	r1, #10
 8004e06:	d004      	beq.n	8004e12 <_puts_r+0xb6>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	7019      	strb	r1, [r3, #0]
 8004e10:	e7c5      	b.n	8004d9e <_puts_r+0x42>
 8004e12:	4622      	mov	r2, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	f000 f817 	bl	8004e48 <__swbuf_r>
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1bf      	bne.n	8004d9e <_puts_r+0x42>
 8004e1e:	e7df      	b.n	8004de0 <_puts_r+0x84>
 8004e20:	250a      	movs	r5, #10
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	6022      	str	r2, [r4, #0]
 8004e28:	701d      	strb	r5, [r3, #0]
 8004e2a:	e7db      	b.n	8004de4 <_puts_r+0x88>
 8004e2c:	080061f8 	.word	0x080061f8
 8004e30:	08006218 	.word	0x08006218
 8004e34:	080061d8 	.word	0x080061d8

08004e38 <puts>:
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <puts+0xc>)
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	f7ff bf8d 	b.w	8004d5c <_puts_r>
 8004e42:	bf00      	nop
 8004e44:	20000010 	.word	0x20000010

08004e48 <__swbuf_r>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	460e      	mov	r6, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	4605      	mov	r5, r0
 8004e50:	b118      	cbz	r0, 8004e5a <__swbuf_r+0x12>
 8004e52:	6983      	ldr	r3, [r0, #24]
 8004e54:	b90b      	cbnz	r3, 8004e5a <__swbuf_r+0x12>
 8004e56:	f000 f9d1 	bl	80051fc <__sinit>
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <__swbuf_r+0x98>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	d12b      	bne.n	8004eb8 <__swbuf_r+0x70>
 8004e60:	686c      	ldr	r4, [r5, #4]
 8004e62:	69a3      	ldr	r3, [r4, #24]
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	071a      	lsls	r2, r3, #28
 8004e6a:	d52f      	bpl.n	8004ecc <__swbuf_r+0x84>
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	b36b      	cbz	r3, 8004ecc <__swbuf_r+0x84>
 8004e70:	6923      	ldr	r3, [r4, #16]
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	b2f6      	uxtb	r6, r6
 8004e76:	1ac0      	subs	r0, r0, r3
 8004e78:	6963      	ldr	r3, [r4, #20]
 8004e7a:	4637      	mov	r7, r6
 8004e7c:	4283      	cmp	r3, r0
 8004e7e:	dc04      	bgt.n	8004e8a <__swbuf_r+0x42>
 8004e80:	4621      	mov	r1, r4
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f926 	bl	80050d4 <_fflush_r>
 8004e88:	bb30      	cbnz	r0, 8004ed8 <__swbuf_r+0x90>
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	6022      	str	r2, [r4, #0]
 8004e98:	701e      	strb	r6, [r3, #0]
 8004e9a:	6963      	ldr	r3, [r4, #20]
 8004e9c:	4283      	cmp	r3, r0
 8004e9e:	d004      	beq.n	8004eaa <__swbuf_r+0x62>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	07db      	lsls	r3, r3, #31
 8004ea4:	d506      	bpl.n	8004eb4 <__swbuf_r+0x6c>
 8004ea6:	2e0a      	cmp	r6, #10
 8004ea8:	d104      	bne.n	8004eb4 <__swbuf_r+0x6c>
 8004eaa:	4621      	mov	r1, r4
 8004eac:	4628      	mov	r0, r5
 8004eae:	f000 f911 	bl	80050d4 <_fflush_r>
 8004eb2:	b988      	cbnz	r0, 8004ed8 <__swbuf_r+0x90>
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <__swbuf_r+0x9c>)
 8004eba:	429c      	cmp	r4, r3
 8004ebc:	d101      	bne.n	8004ec2 <__swbuf_r+0x7a>
 8004ebe:	68ac      	ldr	r4, [r5, #8]
 8004ec0:	e7cf      	b.n	8004e62 <__swbuf_r+0x1a>
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <__swbuf_r+0xa0>)
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	bf08      	it	eq
 8004ec8:	68ec      	ldreq	r4, [r5, #12]
 8004eca:	e7ca      	b.n	8004e62 <__swbuf_r+0x1a>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f80c 	bl	8004eec <__swsetup_r>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d0cb      	beq.n	8004e70 <__swbuf_r+0x28>
 8004ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8004edc:	e7ea      	b.n	8004eb4 <__swbuf_r+0x6c>
 8004ede:	bf00      	nop
 8004ee0:	080061f8 	.word	0x080061f8
 8004ee4:	08006218 	.word	0x08006218
 8004ee8:	080061d8 	.word	0x080061d8

08004eec <__swsetup_r>:
 8004eec:	4b32      	ldr	r3, [pc, #200]	; (8004fb8 <__swsetup_r+0xcc>)
 8004eee:	b570      	push	{r4, r5, r6, lr}
 8004ef0:	681d      	ldr	r5, [r3, #0]
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	b125      	cbz	r5, 8004f02 <__swsetup_r+0x16>
 8004ef8:	69ab      	ldr	r3, [r5, #24]
 8004efa:	b913      	cbnz	r3, 8004f02 <__swsetup_r+0x16>
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 f97d 	bl	80051fc <__sinit>
 8004f02:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <__swsetup_r+0xd0>)
 8004f04:	429c      	cmp	r4, r3
 8004f06:	d10f      	bne.n	8004f28 <__swsetup_r+0x3c>
 8004f08:	686c      	ldr	r4, [r5, #4]
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f10:	0719      	lsls	r1, r3, #28
 8004f12:	d42c      	bmi.n	8004f6e <__swsetup_r+0x82>
 8004f14:	06dd      	lsls	r5, r3, #27
 8004f16:	d411      	bmi.n	8004f3c <__swsetup_r+0x50>
 8004f18:	2309      	movs	r3, #9
 8004f1a:	6033      	str	r3, [r6, #0]
 8004f1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	e03e      	b.n	8004fa6 <__swsetup_r+0xba>
 8004f28:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <__swsetup_r+0xd4>)
 8004f2a:	429c      	cmp	r4, r3
 8004f2c:	d101      	bne.n	8004f32 <__swsetup_r+0x46>
 8004f2e:	68ac      	ldr	r4, [r5, #8]
 8004f30:	e7eb      	b.n	8004f0a <__swsetup_r+0x1e>
 8004f32:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <__swsetup_r+0xd8>)
 8004f34:	429c      	cmp	r4, r3
 8004f36:	bf08      	it	eq
 8004f38:	68ec      	ldreq	r4, [r5, #12]
 8004f3a:	e7e6      	b.n	8004f0a <__swsetup_r+0x1e>
 8004f3c:	0758      	lsls	r0, r3, #29
 8004f3e:	d512      	bpl.n	8004f66 <__swsetup_r+0x7a>
 8004f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f42:	b141      	cbz	r1, 8004f56 <__swsetup_r+0x6a>
 8004f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f48:	4299      	cmp	r1, r3
 8004f4a:	d002      	beq.n	8004f52 <__swsetup_r+0x66>
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 fa59 	bl	8005404 <_free_r>
 8004f52:	2300      	movs	r3, #0
 8004f54:	6363      	str	r3, [r4, #52]	; 0x34
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	b94b      	cbnz	r3, 8004f86 <__swsetup_r+0x9a>
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7c:	d003      	beq.n	8004f86 <__swsetup_r+0x9a>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4630      	mov	r0, r6
 8004f82:	f000 f9ff 	bl	8005384 <__smakebuf_r>
 8004f86:	89a0      	ldrh	r0, [r4, #12]
 8004f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f8c:	f010 0301 	ands.w	r3, r0, #1
 8004f90:	d00a      	beq.n	8004fa8 <__swsetup_r+0xbc>
 8004f92:	2300      	movs	r3, #0
 8004f94:	60a3      	str	r3, [r4, #8]
 8004f96:	6963      	ldr	r3, [r4, #20]
 8004f98:	425b      	negs	r3, r3
 8004f9a:	61a3      	str	r3, [r4, #24]
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	b943      	cbnz	r3, 8004fb2 <__swsetup_r+0xc6>
 8004fa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fa4:	d1ba      	bne.n	8004f1c <__swsetup_r+0x30>
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	0781      	lsls	r1, r0, #30
 8004faa:	bf58      	it	pl
 8004fac:	6963      	ldrpl	r3, [r4, #20]
 8004fae:	60a3      	str	r3, [r4, #8]
 8004fb0:	e7f4      	b.n	8004f9c <__swsetup_r+0xb0>
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	e7f7      	b.n	8004fa6 <__swsetup_r+0xba>
 8004fb6:	bf00      	nop
 8004fb8:	20000010 	.word	0x20000010
 8004fbc:	080061f8 	.word	0x080061f8
 8004fc0:	08006218 	.word	0x08006218
 8004fc4:	080061d8 	.word	0x080061d8

08004fc8 <__sflush_r>:
 8004fc8:	898a      	ldrh	r2, [r1, #12]
 8004fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fce:	4605      	mov	r5, r0
 8004fd0:	0710      	lsls	r0, r2, #28
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	d458      	bmi.n	8005088 <__sflush_r+0xc0>
 8004fd6:	684b      	ldr	r3, [r1, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	dc05      	bgt.n	8004fe8 <__sflush_r+0x20>
 8004fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	dc02      	bgt.n	8004fe8 <__sflush_r+0x20>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fea:	2e00      	cmp	r6, #0
 8004fec:	d0f9      	beq.n	8004fe2 <__sflush_r+0x1a>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ff4:	682f      	ldr	r7, [r5, #0]
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	d032      	beq.n	8005060 <__sflush_r+0x98>
 8004ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	075a      	lsls	r2, r3, #29
 8005000:	d505      	bpl.n	800500e <__sflush_r+0x46>
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	1ac0      	subs	r0, r0, r3
 8005006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005008:	b10b      	cbz	r3, 800500e <__sflush_r+0x46>
 800500a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800500c:	1ac0      	subs	r0, r0, r3
 800500e:	2300      	movs	r3, #0
 8005010:	4602      	mov	r2, r0
 8005012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005014:	4628      	mov	r0, r5
 8005016:	6a21      	ldr	r1, [r4, #32]
 8005018:	47b0      	blx	r6
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	d106      	bne.n	800502e <__sflush_r+0x66>
 8005020:	6829      	ldr	r1, [r5, #0]
 8005022:	291d      	cmp	r1, #29
 8005024:	d82c      	bhi.n	8005080 <__sflush_r+0xb8>
 8005026:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <__sflush_r+0x108>)
 8005028:	40ca      	lsrs	r2, r1
 800502a:	07d6      	lsls	r6, r2, #31
 800502c:	d528      	bpl.n	8005080 <__sflush_r+0xb8>
 800502e:	2200      	movs	r2, #0
 8005030:	6062      	str	r2, [r4, #4]
 8005032:	6922      	ldr	r2, [r4, #16]
 8005034:	04d9      	lsls	r1, r3, #19
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	d504      	bpl.n	8005044 <__sflush_r+0x7c>
 800503a:	1c42      	adds	r2, r0, #1
 800503c:	d101      	bne.n	8005042 <__sflush_r+0x7a>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b903      	cbnz	r3, 8005044 <__sflush_r+0x7c>
 8005042:	6560      	str	r0, [r4, #84]	; 0x54
 8005044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005046:	602f      	str	r7, [r5, #0]
 8005048:	2900      	cmp	r1, #0
 800504a:	d0ca      	beq.n	8004fe2 <__sflush_r+0x1a>
 800504c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005050:	4299      	cmp	r1, r3
 8005052:	d002      	beq.n	800505a <__sflush_r+0x92>
 8005054:	4628      	mov	r0, r5
 8005056:	f000 f9d5 	bl	8005404 <_free_r>
 800505a:	2000      	movs	r0, #0
 800505c:	6360      	str	r0, [r4, #52]	; 0x34
 800505e:	e7c1      	b.n	8004fe4 <__sflush_r+0x1c>
 8005060:	6a21      	ldr	r1, [r4, #32]
 8005062:	2301      	movs	r3, #1
 8005064:	4628      	mov	r0, r5
 8005066:	47b0      	blx	r6
 8005068:	1c41      	adds	r1, r0, #1
 800506a:	d1c7      	bne.n	8004ffc <__sflush_r+0x34>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0c4      	beq.n	8004ffc <__sflush_r+0x34>
 8005072:	2b1d      	cmp	r3, #29
 8005074:	d001      	beq.n	800507a <__sflush_r+0xb2>
 8005076:	2b16      	cmp	r3, #22
 8005078:	d101      	bne.n	800507e <__sflush_r+0xb6>
 800507a:	602f      	str	r7, [r5, #0]
 800507c:	e7b1      	b.n	8004fe2 <__sflush_r+0x1a>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	e7ad      	b.n	8004fe4 <__sflush_r+0x1c>
 8005088:	690f      	ldr	r7, [r1, #16]
 800508a:	2f00      	cmp	r7, #0
 800508c:	d0a9      	beq.n	8004fe2 <__sflush_r+0x1a>
 800508e:	0793      	lsls	r3, r2, #30
 8005090:	bf18      	it	ne
 8005092:	2300      	movne	r3, #0
 8005094:	680e      	ldr	r6, [r1, #0]
 8005096:	bf08      	it	eq
 8005098:	694b      	ldreq	r3, [r1, #20]
 800509a:	eba6 0807 	sub.w	r8, r6, r7
 800509e:	600f      	str	r7, [r1, #0]
 80050a0:	608b      	str	r3, [r1, #8]
 80050a2:	f1b8 0f00 	cmp.w	r8, #0
 80050a6:	dd9c      	ble.n	8004fe2 <__sflush_r+0x1a>
 80050a8:	4643      	mov	r3, r8
 80050aa:	463a      	mov	r2, r7
 80050ac:	4628      	mov	r0, r5
 80050ae:	6a21      	ldr	r1, [r4, #32]
 80050b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050b2:	47b0      	blx	r6
 80050b4:	2800      	cmp	r0, #0
 80050b6:	dc06      	bgt.n	80050c6 <__sflush_r+0xfe>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	e78e      	b.n	8004fe4 <__sflush_r+0x1c>
 80050c6:	4407      	add	r7, r0
 80050c8:	eba8 0800 	sub.w	r8, r8, r0
 80050cc:	e7e9      	b.n	80050a2 <__sflush_r+0xda>
 80050ce:	bf00      	nop
 80050d0:	20400001 	.word	0x20400001

080050d4 <_fflush_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	4605      	mov	r5, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b913      	cbnz	r3, 80050e4 <_fflush_r+0x10>
 80050de:	2500      	movs	r5, #0
 80050e0:	4628      	mov	r0, r5
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	b118      	cbz	r0, 80050ee <_fflush_r+0x1a>
 80050e6:	6983      	ldr	r3, [r0, #24]
 80050e8:	b90b      	cbnz	r3, 80050ee <_fflush_r+0x1a>
 80050ea:	f000 f887 	bl	80051fc <__sinit>
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <_fflush_r+0x6c>)
 80050f0:	429c      	cmp	r4, r3
 80050f2:	d11b      	bne.n	800512c <_fflush_r+0x58>
 80050f4:	686c      	ldr	r4, [r5, #4]
 80050f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0ef      	beq.n	80050de <_fflush_r+0xa>
 80050fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005100:	07d0      	lsls	r0, r2, #31
 8005102:	d404      	bmi.n	800510e <_fflush_r+0x3a>
 8005104:	0599      	lsls	r1, r3, #22
 8005106:	d402      	bmi.n	800510e <_fflush_r+0x3a>
 8005108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510a:	f000 f915 	bl	8005338 <__retarget_lock_acquire_recursive>
 800510e:	4628      	mov	r0, r5
 8005110:	4621      	mov	r1, r4
 8005112:	f7ff ff59 	bl	8004fc8 <__sflush_r>
 8005116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005118:	4605      	mov	r5, r0
 800511a:	07da      	lsls	r2, r3, #31
 800511c:	d4e0      	bmi.n	80050e0 <_fflush_r+0xc>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	d4dd      	bmi.n	80050e0 <_fflush_r+0xc>
 8005124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005126:	f000 f908 	bl	800533a <__retarget_lock_release_recursive>
 800512a:	e7d9      	b.n	80050e0 <_fflush_r+0xc>
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <_fflush_r+0x70>)
 800512e:	429c      	cmp	r4, r3
 8005130:	d101      	bne.n	8005136 <_fflush_r+0x62>
 8005132:	68ac      	ldr	r4, [r5, #8]
 8005134:	e7df      	b.n	80050f6 <_fflush_r+0x22>
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <_fflush_r+0x74>)
 8005138:	429c      	cmp	r4, r3
 800513a:	bf08      	it	eq
 800513c:	68ec      	ldreq	r4, [r5, #12]
 800513e:	e7da      	b.n	80050f6 <_fflush_r+0x22>
 8005140:	080061f8 	.word	0x080061f8
 8005144:	08006218 	.word	0x08006218
 8005148:	080061d8 	.word	0x080061d8

0800514c <std>:
 800514c:	2300      	movs	r3, #0
 800514e:	b510      	push	{r4, lr}
 8005150:	4604      	mov	r4, r0
 8005152:	e9c0 3300 	strd	r3, r3, [r0]
 8005156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800515a:	6083      	str	r3, [r0, #8]
 800515c:	8181      	strh	r1, [r0, #12]
 800515e:	6643      	str	r3, [r0, #100]	; 0x64
 8005160:	81c2      	strh	r2, [r0, #14]
 8005162:	6183      	str	r3, [r0, #24]
 8005164:	4619      	mov	r1, r3
 8005166:	2208      	movs	r2, #8
 8005168:	305c      	adds	r0, #92	; 0x5c
 800516a:	f7ff fdef 	bl	8004d4c <memset>
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <std+0x38>)
 8005170:	6224      	str	r4, [r4, #32]
 8005172:	6263      	str	r3, [r4, #36]	; 0x24
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <std+0x3c>)
 8005176:	62a3      	str	r3, [r4, #40]	; 0x28
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <std+0x40>)
 800517a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <std+0x44>)
 800517e:	6323      	str	r3, [r4, #48]	; 0x30
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	08005571 	.word	0x08005571
 8005188:	08005593 	.word	0x08005593
 800518c:	080055cb 	.word	0x080055cb
 8005190:	080055ef 	.word	0x080055ef

08005194 <_cleanup_r>:
 8005194:	4901      	ldr	r1, [pc, #4]	; (800519c <_cleanup_r+0x8>)
 8005196:	f000 b8af 	b.w	80052f8 <_fwalk_reent>
 800519a:	bf00      	nop
 800519c:	080050d5 	.word	0x080050d5

080051a0 <__sfmoreglue>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	2568      	movs	r5, #104	; 0x68
 80051a4:	1e4a      	subs	r2, r1, #1
 80051a6:	4355      	muls	r5, r2
 80051a8:	460e      	mov	r6, r1
 80051aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051ae:	f000 f975 	bl	800549c <_malloc_r>
 80051b2:	4604      	mov	r4, r0
 80051b4:	b140      	cbz	r0, 80051c8 <__sfmoreglue+0x28>
 80051b6:	2100      	movs	r1, #0
 80051b8:	e9c0 1600 	strd	r1, r6, [r0]
 80051bc:	300c      	adds	r0, #12
 80051be:	60a0      	str	r0, [r4, #8]
 80051c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051c4:	f7ff fdc2 	bl	8004d4c <memset>
 80051c8:	4620      	mov	r0, r4
 80051ca:	bd70      	pop	{r4, r5, r6, pc}

080051cc <__sfp_lock_acquire>:
 80051cc:	4801      	ldr	r0, [pc, #4]	; (80051d4 <__sfp_lock_acquire+0x8>)
 80051ce:	f000 b8b3 	b.w	8005338 <__retarget_lock_acquire_recursive>
 80051d2:	bf00      	nop
 80051d4:	20001e8c 	.word	0x20001e8c

080051d8 <__sfp_lock_release>:
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <__sfp_lock_release+0x8>)
 80051da:	f000 b8ae 	b.w	800533a <__retarget_lock_release_recursive>
 80051de:	bf00      	nop
 80051e0:	20001e8c 	.word	0x20001e8c

080051e4 <__sinit_lock_acquire>:
 80051e4:	4801      	ldr	r0, [pc, #4]	; (80051ec <__sinit_lock_acquire+0x8>)
 80051e6:	f000 b8a7 	b.w	8005338 <__retarget_lock_acquire_recursive>
 80051ea:	bf00      	nop
 80051ec:	20001e87 	.word	0x20001e87

080051f0 <__sinit_lock_release>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__sinit_lock_release+0x8>)
 80051f2:	f000 b8a2 	b.w	800533a <__retarget_lock_release_recursive>
 80051f6:	bf00      	nop
 80051f8:	20001e87 	.word	0x20001e87

080051fc <__sinit>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	f7ff fff0 	bl	80051e4 <__sinit_lock_acquire>
 8005204:	69a3      	ldr	r3, [r4, #24]
 8005206:	b11b      	cbz	r3, 8005210 <__sinit+0x14>
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f7ff bff0 	b.w	80051f0 <__sinit_lock_release>
 8005210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005214:	6523      	str	r3, [r4, #80]	; 0x50
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <__sinit+0x68>)
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <__sinit+0x6c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	62a2      	str	r2, [r4, #40]	; 0x28
 800521e:	42a3      	cmp	r3, r4
 8005220:	bf08      	it	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	4620      	mov	r0, r4
 8005226:	bf08      	it	eq
 8005228:	61a3      	streq	r3, [r4, #24]
 800522a:	f000 f81f 	bl	800526c <__sfp>
 800522e:	6060      	str	r0, [r4, #4]
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f81b 	bl	800526c <__sfp>
 8005236:	60a0      	str	r0, [r4, #8]
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f817 	bl	800526c <__sfp>
 800523e:	2200      	movs	r2, #0
 8005240:	2104      	movs	r1, #4
 8005242:	60e0      	str	r0, [r4, #12]
 8005244:	6860      	ldr	r0, [r4, #4]
 8005246:	f7ff ff81 	bl	800514c <std>
 800524a:	2201      	movs	r2, #1
 800524c:	2109      	movs	r1, #9
 800524e:	68a0      	ldr	r0, [r4, #8]
 8005250:	f7ff ff7c 	bl	800514c <std>
 8005254:	2202      	movs	r2, #2
 8005256:	2112      	movs	r1, #18
 8005258:	68e0      	ldr	r0, [r4, #12]
 800525a:	f7ff ff77 	bl	800514c <std>
 800525e:	2301      	movs	r3, #1
 8005260:	61a3      	str	r3, [r4, #24]
 8005262:	e7d1      	b.n	8005208 <__sinit+0xc>
 8005264:	080061d4 	.word	0x080061d4
 8005268:	08005195 	.word	0x08005195

0800526c <__sfp>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	4607      	mov	r7, r0
 8005270:	f7ff ffac 	bl	80051cc <__sfp_lock_acquire>
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <__sfp+0x84>)
 8005276:	681e      	ldr	r6, [r3, #0]
 8005278:	69b3      	ldr	r3, [r6, #24]
 800527a:	b913      	cbnz	r3, 8005282 <__sfp+0x16>
 800527c:	4630      	mov	r0, r6
 800527e:	f7ff ffbd 	bl	80051fc <__sinit>
 8005282:	3648      	adds	r6, #72	; 0x48
 8005284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005288:	3b01      	subs	r3, #1
 800528a:	d503      	bpl.n	8005294 <__sfp+0x28>
 800528c:	6833      	ldr	r3, [r6, #0]
 800528e:	b30b      	cbz	r3, 80052d4 <__sfp+0x68>
 8005290:	6836      	ldr	r6, [r6, #0]
 8005292:	e7f7      	b.n	8005284 <__sfp+0x18>
 8005294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005298:	b9d5      	cbnz	r5, 80052d0 <__sfp+0x64>
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <__sfp+0x88>)
 800529c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052a0:	60e3      	str	r3, [r4, #12]
 80052a2:	6665      	str	r5, [r4, #100]	; 0x64
 80052a4:	f000 f847 	bl	8005336 <__retarget_lock_init_recursive>
 80052a8:	f7ff ff96 	bl	80051d8 <__sfp_lock_release>
 80052ac:	2208      	movs	r2, #8
 80052ae:	4629      	mov	r1, r5
 80052b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052b8:	6025      	str	r5, [r4, #0]
 80052ba:	61a5      	str	r5, [r4, #24]
 80052bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052c0:	f7ff fd44 	bl	8004d4c <memset>
 80052c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052cc:	4620      	mov	r0, r4
 80052ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052d0:	3468      	adds	r4, #104	; 0x68
 80052d2:	e7d9      	b.n	8005288 <__sfp+0x1c>
 80052d4:	2104      	movs	r1, #4
 80052d6:	4638      	mov	r0, r7
 80052d8:	f7ff ff62 	bl	80051a0 <__sfmoreglue>
 80052dc:	4604      	mov	r4, r0
 80052de:	6030      	str	r0, [r6, #0]
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d1d5      	bne.n	8005290 <__sfp+0x24>
 80052e4:	f7ff ff78 	bl	80051d8 <__sfp_lock_release>
 80052e8:	230c      	movs	r3, #12
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	e7ee      	b.n	80052cc <__sfp+0x60>
 80052ee:	bf00      	nop
 80052f0:	080061d4 	.word	0x080061d4
 80052f4:	ffff0001 	.word	0xffff0001

080052f8 <_fwalk_reent>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4606      	mov	r6, r0
 80052fe:	4688      	mov	r8, r1
 8005300:	2700      	movs	r7, #0
 8005302:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800530a:	f1b9 0901 	subs.w	r9, r9, #1
 800530e:	d505      	bpl.n	800531c <_fwalk_reent+0x24>
 8005310:	6824      	ldr	r4, [r4, #0]
 8005312:	2c00      	cmp	r4, #0
 8005314:	d1f7      	bne.n	8005306 <_fwalk_reent+0xe>
 8005316:	4638      	mov	r0, r7
 8005318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531c:	89ab      	ldrh	r3, [r5, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d907      	bls.n	8005332 <_fwalk_reent+0x3a>
 8005322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005326:	3301      	adds	r3, #1
 8005328:	d003      	beq.n	8005332 <_fwalk_reent+0x3a>
 800532a:	4629      	mov	r1, r5
 800532c:	4630      	mov	r0, r6
 800532e:	47c0      	blx	r8
 8005330:	4307      	orrs	r7, r0
 8005332:	3568      	adds	r5, #104	; 0x68
 8005334:	e7e9      	b.n	800530a <_fwalk_reent+0x12>

08005336 <__retarget_lock_init_recursive>:
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_acquire_recursive>:
 8005338:	4770      	bx	lr

0800533a <__retarget_lock_release_recursive>:
 800533a:	4770      	bx	lr

0800533c <__swhatbuf_r>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	460e      	mov	r6, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	4614      	mov	r4, r2
 8005346:	2900      	cmp	r1, #0
 8005348:	461d      	mov	r5, r3
 800534a:	b096      	sub	sp, #88	; 0x58
 800534c:	da07      	bge.n	800535e <__swhatbuf_r+0x22>
 800534e:	2300      	movs	r3, #0
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	89b3      	ldrh	r3, [r6, #12]
 8005354:	061a      	lsls	r2, r3, #24
 8005356:	d410      	bmi.n	800537a <__swhatbuf_r+0x3e>
 8005358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800535c:	e00e      	b.n	800537c <__swhatbuf_r+0x40>
 800535e:	466a      	mov	r2, sp
 8005360:	f000 f96c 	bl	800563c <_fstat_r>
 8005364:	2800      	cmp	r0, #0
 8005366:	dbf2      	blt.n	800534e <__swhatbuf_r+0x12>
 8005368:	9a01      	ldr	r2, [sp, #4]
 800536a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800536e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005372:	425a      	negs	r2, r3
 8005374:	415a      	adcs	r2, r3
 8005376:	602a      	str	r2, [r5, #0]
 8005378:	e7ee      	b.n	8005358 <__swhatbuf_r+0x1c>
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	2000      	movs	r0, #0
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	b016      	add	sp, #88	; 0x58
 8005382:	bd70      	pop	{r4, r5, r6, pc}

08005384 <__smakebuf_r>:
 8005384:	898b      	ldrh	r3, [r1, #12]
 8005386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005388:	079d      	lsls	r5, r3, #30
 800538a:	4606      	mov	r6, r0
 800538c:	460c      	mov	r4, r1
 800538e:	d507      	bpl.n	80053a0 <__smakebuf_r+0x1c>
 8005390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	2301      	movs	r3, #1
 800539a:	6163      	str	r3, [r4, #20]
 800539c:	b002      	add	sp, #8
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	466a      	mov	r2, sp
 80053a2:	ab01      	add	r3, sp, #4
 80053a4:	f7ff ffca 	bl	800533c <__swhatbuf_r>
 80053a8:	9900      	ldr	r1, [sp, #0]
 80053aa:	4605      	mov	r5, r0
 80053ac:	4630      	mov	r0, r6
 80053ae:	f000 f875 	bl	800549c <_malloc_r>
 80053b2:	b948      	cbnz	r0, 80053c8 <__smakebuf_r+0x44>
 80053b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b8:	059a      	lsls	r2, r3, #22
 80053ba:	d4ef      	bmi.n	800539c <__smakebuf_r+0x18>
 80053bc:	f023 0303 	bic.w	r3, r3, #3
 80053c0:	f043 0302 	orr.w	r3, r3, #2
 80053c4:	81a3      	strh	r3, [r4, #12]
 80053c6:	e7e3      	b.n	8005390 <__smakebuf_r+0xc>
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <__smakebuf_r+0x7c>)
 80053ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	6020      	str	r0, [r4, #0]
 80053d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d4:	81a3      	strh	r3, [r4, #12]
 80053d6:	9b00      	ldr	r3, [sp, #0]
 80053d8:	6120      	str	r0, [r4, #16]
 80053da:	6163      	str	r3, [r4, #20]
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	b15b      	cbz	r3, 80053f8 <__smakebuf_r+0x74>
 80053e0:	4630      	mov	r0, r6
 80053e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053e6:	f000 f93b 	bl	8005660 <_isatty_r>
 80053ea:	b128      	cbz	r0, 80053f8 <__smakebuf_r+0x74>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	89a0      	ldrh	r0, [r4, #12]
 80053fa:	4305      	orrs	r5, r0
 80053fc:	81a5      	strh	r5, [r4, #12]
 80053fe:	e7cd      	b.n	800539c <__smakebuf_r+0x18>
 8005400:	08005195 	.word	0x08005195

08005404 <_free_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4605      	mov	r5, r0
 8005408:	2900      	cmp	r1, #0
 800540a:	d043      	beq.n	8005494 <_free_r+0x90>
 800540c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005410:	1f0c      	subs	r4, r1, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bfb8      	it	lt
 8005416:	18e4      	addlt	r4, r4, r3
 8005418:	f000 f944 	bl	80056a4 <__malloc_lock>
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <_free_r+0x94>)
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	4610      	mov	r0, r2
 8005422:	b933      	cbnz	r3, 8005432 <_free_r+0x2e>
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	6014      	str	r4, [r2, #0]
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800542e:	f000 b93f 	b.w	80056b0 <__malloc_unlock>
 8005432:	42a3      	cmp	r3, r4
 8005434:	d90a      	bls.n	800544c <_free_r+0x48>
 8005436:	6821      	ldr	r1, [r4, #0]
 8005438:	1862      	adds	r2, r4, r1
 800543a:	4293      	cmp	r3, r2
 800543c:	bf01      	itttt	eq
 800543e:	681a      	ldreq	r2, [r3, #0]
 8005440:	685b      	ldreq	r3, [r3, #4]
 8005442:	1852      	addeq	r2, r2, r1
 8005444:	6022      	streq	r2, [r4, #0]
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6004      	str	r4, [r0, #0]
 800544a:	e7ed      	b.n	8005428 <_free_r+0x24>
 800544c:	461a      	mov	r2, r3
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	b10b      	cbz	r3, 8005456 <_free_r+0x52>
 8005452:	42a3      	cmp	r3, r4
 8005454:	d9fa      	bls.n	800544c <_free_r+0x48>
 8005456:	6811      	ldr	r1, [r2, #0]
 8005458:	1850      	adds	r0, r2, r1
 800545a:	42a0      	cmp	r0, r4
 800545c:	d10b      	bne.n	8005476 <_free_r+0x72>
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	4401      	add	r1, r0
 8005462:	1850      	adds	r0, r2, r1
 8005464:	4283      	cmp	r3, r0
 8005466:	6011      	str	r1, [r2, #0]
 8005468:	d1de      	bne.n	8005428 <_free_r+0x24>
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4401      	add	r1, r0
 8005470:	6011      	str	r1, [r2, #0]
 8005472:	6053      	str	r3, [r2, #4]
 8005474:	e7d8      	b.n	8005428 <_free_r+0x24>
 8005476:	d902      	bls.n	800547e <_free_r+0x7a>
 8005478:	230c      	movs	r3, #12
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	e7d4      	b.n	8005428 <_free_r+0x24>
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	1821      	adds	r1, r4, r0
 8005482:	428b      	cmp	r3, r1
 8005484:	bf01      	itttt	eq
 8005486:	6819      	ldreq	r1, [r3, #0]
 8005488:	685b      	ldreq	r3, [r3, #4]
 800548a:	1809      	addeq	r1, r1, r0
 800548c:	6021      	streq	r1, [r4, #0]
 800548e:	6063      	str	r3, [r4, #4]
 8005490:	6054      	str	r4, [r2, #4]
 8005492:	e7c9      	b.n	8005428 <_free_r+0x24>
 8005494:	bd38      	pop	{r3, r4, r5, pc}
 8005496:	bf00      	nop
 8005498:	200019a0 	.word	0x200019a0

0800549c <_malloc_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	1ccd      	adds	r5, r1, #3
 80054a0:	f025 0503 	bic.w	r5, r5, #3
 80054a4:	3508      	adds	r5, #8
 80054a6:	2d0c      	cmp	r5, #12
 80054a8:	bf38      	it	cc
 80054aa:	250c      	movcc	r5, #12
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	4606      	mov	r6, r0
 80054b0:	db01      	blt.n	80054b6 <_malloc_r+0x1a>
 80054b2:	42a9      	cmp	r1, r5
 80054b4:	d903      	bls.n	80054be <_malloc_r+0x22>
 80054b6:	230c      	movs	r3, #12
 80054b8:	6033      	str	r3, [r6, #0]
 80054ba:	2000      	movs	r0, #0
 80054bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054be:	f000 f8f1 	bl	80056a4 <__malloc_lock>
 80054c2:	4921      	ldr	r1, [pc, #132]	; (8005548 <_malloc_r+0xac>)
 80054c4:	680a      	ldr	r2, [r1, #0]
 80054c6:	4614      	mov	r4, r2
 80054c8:	b99c      	cbnz	r4, 80054f2 <_malloc_r+0x56>
 80054ca:	4f20      	ldr	r7, [pc, #128]	; (800554c <_malloc_r+0xb0>)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	b923      	cbnz	r3, 80054da <_malloc_r+0x3e>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f83c 	bl	8005550 <_sbrk_r>
 80054d8:	6038      	str	r0, [r7, #0]
 80054da:	4629      	mov	r1, r5
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f837 	bl	8005550 <_sbrk_r>
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	d123      	bne.n	800552e <_malloc_r+0x92>
 80054e6:	230c      	movs	r3, #12
 80054e8:	4630      	mov	r0, r6
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	f000 f8e0 	bl	80056b0 <__malloc_unlock>
 80054f0:	e7e3      	b.n	80054ba <_malloc_r+0x1e>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	1b5b      	subs	r3, r3, r5
 80054f6:	d417      	bmi.n	8005528 <_malloc_r+0x8c>
 80054f8:	2b0b      	cmp	r3, #11
 80054fa:	d903      	bls.n	8005504 <_malloc_r+0x68>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	441c      	add	r4, r3
 8005500:	6025      	str	r5, [r4, #0]
 8005502:	e004      	b.n	800550e <_malloc_r+0x72>
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	42a2      	cmp	r2, r4
 8005508:	bf0c      	ite	eq
 800550a:	600b      	streq	r3, [r1, #0]
 800550c:	6053      	strne	r3, [r2, #4]
 800550e:	4630      	mov	r0, r6
 8005510:	f000 f8ce 	bl	80056b0 <__malloc_unlock>
 8005514:	f104 000b 	add.w	r0, r4, #11
 8005518:	1d23      	adds	r3, r4, #4
 800551a:	f020 0007 	bic.w	r0, r0, #7
 800551e:	1ac2      	subs	r2, r0, r3
 8005520:	d0cc      	beq.n	80054bc <_malloc_r+0x20>
 8005522:	1a1b      	subs	r3, r3, r0
 8005524:	50a3      	str	r3, [r4, r2]
 8005526:	e7c9      	b.n	80054bc <_malloc_r+0x20>
 8005528:	4622      	mov	r2, r4
 800552a:	6864      	ldr	r4, [r4, #4]
 800552c:	e7cc      	b.n	80054c8 <_malloc_r+0x2c>
 800552e:	1cc4      	adds	r4, r0, #3
 8005530:	f024 0403 	bic.w	r4, r4, #3
 8005534:	42a0      	cmp	r0, r4
 8005536:	d0e3      	beq.n	8005500 <_malloc_r+0x64>
 8005538:	1a21      	subs	r1, r4, r0
 800553a:	4630      	mov	r0, r6
 800553c:	f000 f808 	bl	8005550 <_sbrk_r>
 8005540:	3001      	adds	r0, #1
 8005542:	d1dd      	bne.n	8005500 <_malloc_r+0x64>
 8005544:	e7cf      	b.n	80054e6 <_malloc_r+0x4a>
 8005546:	bf00      	nop
 8005548:	200019a0 	.word	0x200019a0
 800554c:	200019a4 	.word	0x200019a4

08005550 <_sbrk_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	2300      	movs	r3, #0
 8005554:	4d05      	ldr	r5, [pc, #20]	; (800556c <_sbrk_r+0x1c>)
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fb fbf0 	bl	8000d40 <_sbrk>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_sbrk_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_sbrk_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20001e90 	.word	0x20001e90

08005570 <__sread>:
 8005570:	b510      	push	{r4, lr}
 8005572:	460c      	mov	r4, r1
 8005574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005578:	f000 f8a0 	bl	80056bc <_read_r>
 800557c:	2800      	cmp	r0, #0
 800557e:	bfab      	itete	ge
 8005580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005582:	89a3      	ldrhlt	r3, [r4, #12]
 8005584:	181b      	addge	r3, r3, r0
 8005586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800558a:	bfac      	ite	ge
 800558c:	6563      	strge	r3, [r4, #84]	; 0x54
 800558e:	81a3      	strhlt	r3, [r4, #12]
 8005590:	bd10      	pop	{r4, pc}

08005592 <__swrite>:
 8005592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005596:	461f      	mov	r7, r3
 8005598:	898b      	ldrh	r3, [r1, #12]
 800559a:	4605      	mov	r5, r0
 800559c:	05db      	lsls	r3, r3, #23
 800559e:	460c      	mov	r4, r1
 80055a0:	4616      	mov	r6, r2
 80055a2:	d505      	bpl.n	80055b0 <__swrite+0x1e>
 80055a4:	2302      	movs	r3, #2
 80055a6:	2200      	movs	r2, #0
 80055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ac:	f000 f868 	bl	8005680 <_lseek_r>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	4632      	mov	r2, r6
 80055b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	4628      	mov	r0, r5
 80055bc:	463b      	mov	r3, r7
 80055be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c6:	f000 b817 	b.w	80055f8 <_write_r>

080055ca <__sseek>:
 80055ca:	b510      	push	{r4, lr}
 80055cc:	460c      	mov	r4, r1
 80055ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d2:	f000 f855 	bl	8005680 <_lseek_r>
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	bf15      	itete	ne
 80055dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80055de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055e6:	81a3      	strheq	r3, [r4, #12]
 80055e8:	bf18      	it	ne
 80055ea:	81a3      	strhne	r3, [r4, #12]
 80055ec:	bd10      	pop	{r4, pc}

080055ee <__sclose>:
 80055ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f2:	f000 b813 	b.w	800561c <_close_r>
	...

080055f8 <_write_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	2200      	movs	r2, #0
 8005602:	4d05      	ldr	r5, [pc, #20]	; (8005618 <_write_r+0x20>)
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f7fa fe38 	bl	800027c <_write>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_write_r+0x1e>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_write_r+0x1e>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20001e90 	.word	0x20001e90

0800561c <_close_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	2300      	movs	r3, #0
 8005620:	4d05      	ldr	r5, [pc, #20]	; (8005638 <_close_r+0x1c>)
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fb fb59 	bl	8000cde <_close>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_close_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_close_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20001e90 	.word	0x20001e90

0800563c <_fstat_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	2300      	movs	r3, #0
 8005640:	4d06      	ldr	r5, [pc, #24]	; (800565c <_fstat_r+0x20>)
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	602b      	str	r3, [r5, #0]
 800564a:	f7fb fb53 	bl	8000cf4 <_fstat>
 800564e:	1c43      	adds	r3, r0, #1
 8005650:	d102      	bne.n	8005658 <_fstat_r+0x1c>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	b103      	cbz	r3, 8005658 <_fstat_r+0x1c>
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	bd38      	pop	{r3, r4, r5, pc}
 800565a:	bf00      	nop
 800565c:	20001e90 	.word	0x20001e90

08005660 <_isatty_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	2300      	movs	r3, #0
 8005664:	4d05      	ldr	r5, [pc, #20]	; (800567c <_isatty_r+0x1c>)
 8005666:	4604      	mov	r4, r0
 8005668:	4608      	mov	r0, r1
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	f7fb fb51 	bl	8000d12 <_isatty>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_isatty_r+0x1a>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_isatty_r+0x1a>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20001e90 	.word	0x20001e90

08005680 <_lseek_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	4611      	mov	r1, r2
 8005688:	2200      	movs	r2, #0
 800568a:	4d05      	ldr	r5, [pc, #20]	; (80056a0 <_lseek_r+0x20>)
 800568c:	602a      	str	r2, [r5, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	f7fb fb49 	bl	8000d26 <_lseek>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_lseek_r+0x1e>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	b103      	cbz	r3, 800569e <_lseek_r+0x1e>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20001e90 	.word	0x20001e90

080056a4 <__malloc_lock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	; (80056ac <__malloc_lock+0x8>)
 80056a6:	f7ff be47 	b.w	8005338 <__retarget_lock_acquire_recursive>
 80056aa:	bf00      	nop
 80056ac:	20001e88 	.word	0x20001e88

080056b0 <__malloc_unlock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__malloc_unlock+0x8>)
 80056b2:	f7ff be42 	b.w	800533a <__retarget_lock_release_recursive>
 80056b6:	bf00      	nop
 80056b8:	20001e88 	.word	0x20001e88

080056bc <_read_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4604      	mov	r4, r0
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	2200      	movs	r2, #0
 80056c6:	4d05      	ldr	r5, [pc, #20]	; (80056dc <_read_r+0x20>)
 80056c8:	602a      	str	r2, [r5, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f7fb faea 	bl	8000ca4 <_read>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_read_r+0x1e>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_read_r+0x1e>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20001e90 	.word	0x20001e90

080056e0 <_init>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

080056ec <_fini>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr
